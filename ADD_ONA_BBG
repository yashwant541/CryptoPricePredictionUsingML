import re
import dataiku
from dataiku.customrecipe import get_input_names_for_role, get_output_names_for_role
import PyPDF2
import sys

def log(message):
    """Enhanced logging with flush"""
    print(f"[LOG] {message}", file=sys.stderr, flush=True)

def process_single_pdf():
    # Hardcoded keywords - financial ratios
    KEYWORDS = [
        'Leverage ratio',
        'Common Equity Tier 1 ratio',
        'Total capital ratio',
        'Liquidity coverage ratio'
    ]
    
    try:
        log("Starting PDF processing for financial ratios...")
        
        # 1. Validate folder connections
        log("Checking folder connections...")
        try:
            input_folder_name = get_input_names_for_role('MPJ3zAOO')
            output_folder_name = get_input_names_for_role('MFCPQWtr')
            
            if not input_folder_name or not output_folder_name:
                raise ValueError("Could not get folder names - check recipe role configuration")
                
            log(f"Input folder ID: {input_folder_name}")
            log(f"Output folder ID: {output_folder_name}")
            
            input_folder = dataiku.Folder(input_folder_name[0])
            output_folder = dataiku.Folder(output_folder_name[0])
            
        except Exception as e:
            raise ValueError(f"Folder connection failed: {str(e)}")

        # 2. Locate PDF file
        log("Searching for PDF file...")
        try:
            all_files = input_folder.list_paths_in_partition()
            log(f"All files in folder: {all_files}")
            
            pdf_files = [f for f in all_files if f.lower().endswith('.pdf')]
            
            if not pdf_files:
                available_files = "\n- ".join(all_files) if all_files else "None"
                raise ValueError(f"No PDF found. Available files:\n- {available_files}")
                
            pdf_path = pdf_files[0]
            log(f"Found PDF: {pdf_path}")
            
        except Exception as e:
            raise ValueError(f"PDF file detection failed: {str(e)}")

        # 3. Process PDF content
        log("Extracting financial ratios from PDF...")
        results = []
        try:
            with input_folder.get_download_stream(pdf_path) as stream:
                reader = PyPDF2.PdfReader(stream)
                
                for page_num, page in enumerate(reader.pages, 1):
                    text = page.extract_text()
                    if text:
                        log(f"Processing page {page_num}...")
                        for keyword in KEYWORDS:
                            # Enhanced pattern to capture ratios after labels
                            pattern = re.escape(keyword) + r'[\s:]*([\d.,]+%?)'
                            matches = re.findall(pattern, text, re.IGNORECASE)
                            for match in matches:
                                results.append((keyword, match.strip()))
                                log(f"Found match: {keyword} = {match.strip()}")
        
        except Exception as e:
            raise ValueError(f"PDF processing failed: {str(e)}")

        # 4. Save results
        log("Saving extracted ratios...")
        try:
            output_filename = "financial_ratios_extracted.csv"
            
            with output_folder.get_writer(output_filename) as writer:
                writer.write("Financial Ratio,Value\n".encode('utf-8'))
                for ratio, value in results:
                    writer.write(f'"{ratio}","{value}"\n'.encode('utf-8'))
            
            log(f"Success! Saved {len(results)} ratios to {output_filename}")
            
        except Exception as e:
            raise ValueError(f"Failed to save results: {str(e)}")

    except Exception as e:
        log(f"ERROR: {str(e)}")
        raise  # Re-raise to ensure Dataiku sees the failure

if __name__ == '__main__':
    process_single_pdf()
