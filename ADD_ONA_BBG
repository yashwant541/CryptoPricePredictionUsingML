import dataiku
import pdfplumber
import pandas as pd
import re
import os
from datetime import datetime

# ---- CONFIGURATION ----
FOLDER_NAME = "bank_pdf_folder"  # your managed folder name
TARGET_KEYWORDS = [
    "Net Interest Income", 
    "Operating Profit", 
    "Total Assets"
]

# Match format like 31.03.2025 or 30-06-2024
DATE_PATTERN = re.compile(r"\b\d{2}[\./-]\d{2}[\./-]\d{4}\b")

# ---- ACCESS MANAGED FOLDER ----
folder = dataiku.Folder(FOLDER_NAME)
folder_path = folder.get_path()

pdf_files = [f for f in os.listdir(folder_path) if f.lower().endswith(".pdf")]
if not pdf_files:
    raise FileNotFoundError("No PDF files found in the folder.")

pdf_path = os.path.join(folder_path, pdf_files[0])  # use first PDF

# ---- HELPER: Parse Date from Header ----
def try_parse_date(text):
    try:
        return datetime.strptime(text.replace("-", ".").replace("/", "."), "%d.%m.%Y")
    except:
        return None

# ---- MAIN PROCESSING ----
results = []

with pdfplumber.open(pdf_path) as pdf:
    for page_num, page in enumerate(pdf.pages):
        tables = page.extract_tables()
        for table_idx, table in enumerate(tables):
            try:
                df = pd.DataFrame(table)
                df.dropna(how="all", inplace=True)

                # Skip small or non-table content
                if df.shape[1] < 2:
                    continue

                # Detect header and set as columns
                header_row = df.iloc[0].fillna("")
                df.columns = header_row
                df = df[1:]

                # Detect date columns
                date_cols = []
                for col in df.columns:
                    match = DATE_PATTERN.match(col)
                    if match:
                        parsed_date = try_parse_date(col)
                        if parsed_date:
                            date_cols.append((col, parsed_date))

                if not date_cols:
                    continue  # skip if no date columns

                # Sort by parsed date and pick latest
                date_cols.sort(key=lambda x: x[1], reverse=True)
                latest_col = date_cols[0][0]

                # Search for each keyword
                for keyword in TARGET_KEYWORDS:
                    matched_rows = df[df.iloc[:, 0].str.contains(keyword, case=False, na=False)]
                    if not matched_rows.empty:
                        row = matched_rows.iloc[0]
                        results.append({
                            "Page": page_num + 1,
                            "Table": table_idx + 1,
                            "Keyword": keyword,
                            "Latest_Date": latest_col,
                            "Value": row.get(latest_col, "")
                        })
            except Exception as e:
                print(f"Error on page {page_num+1}, table {table_idx+1}: {e}")
                continue

# ---- FINAL OUTPUT ----
df_results = pd.DataFrame(results)
print(df_results)

# Optional: Write to a Dataiku output dataset
# output_dataset = dataiku.Dataset("output_quarter_values")
# output_dataset.write_with_schema(df_results)
