import pandas as pd
import dataiku
import os
import io
import re
import tempfile

# ------------------------------------------------------
# üîß Configuration ‚Äî Replace with your Dataiku folder IDs
# ------------------------------------------------------
input_folder = dataiku.Folder("YOUR_INPUT_FOLDER_ID")      # üì• Folder containing input Excel/CSV files
output_folder = dataiku.Folder("YOUR_OUTPUT_FOLDER_ID")    # üì§ Folder to save processed CSV

# ------------------------------------------------------
# üìÇ Function to read Excel or CSV from Dataiku temp
# ------------------------------------------------------
def read_table_file(file_path):
    if file_path.lower().endswith(".xlsx"):
        return pd.read_excel(file_path, header=0)
    elif file_path.lower().endswith(".csv"):
        return pd.read_csv(file_path)
    else:
        raise ValueError(f"Unsupported file format: {file_path}")

# ------------------------------------------------------
# ‚öôÔ∏è Process all files in the input Dataiku folder
# ------------------------------------------------------
output_dfs = []

for file_info in input_folder.list_paths_in_partition():
    file_name = os.path.basename(file_info)
    
    # üîΩ Download file from Dataiku folder to temp path
    with input_folder.get_download_stream(file_info) as stream:
        with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(file_name)[1]) as tmp:
            tmp.write(stream.read())
            tmp_path = tmp.name

    # üßæ Read file content
    df = read_table_file(tmp_path)
    df.columns = [str(c).strip() for c in df.columns]

    # ------------------------------------------------------
    # üßπ Step 1: Identify DF-4 columns (Final Rate section)
    # ------------------------------------------------------
    df4_cols = [col for col in df.columns if col.startswith("DF-4")]
    rating_types = ["AAA", "AA+", "AA", "AA-"]

    # ------------------------------------------------------
    # üßæ Step 2: Reshape DF-4 data into long format
    # ------------------------------------------------------
    melted_df = df.melt(
        id_vars=["Category", "Tenor/Rating"],
        value_vars=df4_cols,
        var_name="DF4_Column",
        value_name="Rate"
    )

    # Extract Rating Type (AAA / AA+ / AA / AA-)
    melted_df["Rating Type"] = melted_df["DF4_Column"].apply(
        lambda x: next((r for r in rating_types if r in x), None)
    )

    melted_df = melted_df[melted_df["Rating Type"].notna()]

    # ------------------------------------------------------
    # üè∑ Step 3: Extract metadata from filename
    # ------------------------------------------------------
    # Example filename: ORIGAMI_XXX_US_20251015.csv
    # Country = US, Data = 20251015
    country_match = re.search(r'_([A-Z]{2})_', file_name)
    data_match = re.search(r'_([A-Z]{2})_([^_.]+)', file_name)

    country = country_match.group(1) if country_match else "NA"
    data_part = data_match.group(2) if data_match else "NA"

    melted_df["FileName"] = file_name
    melted_df["Country"] = country
    melted_df["Data"] = data_part
    melted_df["Category"] = melted_df["Category"].fillna(method="ffill")
    melted_df.rename(columns={"Tenor/Rating": "Tenure"}, inplace=True)
    melted_df["Factor"] = 4
    melted_df["Rationale"] = ""
    melted_df["Final Rate"] = melted_df["Rate"]

    # Select final output columns
    final_df = melted_df[
        ["FileName", "Country", "Data", "Category", "Tenure", "Rating Type", "Rate", "Factor", "Rationale", "Final Rate"]
    ]

    output_dfs.append(final_df)
    os.remove(tmp_path)  # cleanup temp file

# ------------------------------------------------------
# üß© Combine all processed files
# ------------------------------------------------------
if output_dfs:
    combined_df = pd.concat(output_dfs, ignore_index=True)
else:
    combined_df = pd.DataFrame(columns=["FileName", "Country", "Data", "Category", "Tenure", "Rating Type", "Rate", "Factor", "Rationale", "Final Rate"])

# ------------------------------------------------------
# üíæ Save final output CSV to Dataiku folder
# ------------------------------------------------------
output_file_name = "Processed_Final_Rates.csv"
with output_folder.get_writer(output_file_name) as writer:
    combined_df.to_csv(writer, index=False)
