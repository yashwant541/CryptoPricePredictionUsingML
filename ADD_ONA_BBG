# -*- coding: utf-8 -*-
import dataiku
import pandas as pd
import numpy as np
from dataiku import pandasutils as pdu
import pdfplumber
import re
import io
from datetime import datetime

# ---- CONFIG ----
TARGET_KEYWORDS = [
    "Common Equity Tier 1 ratio",
    "Total capital ratio",
    "Leverage ratio",
    "Liquidity coverage ratio"
]

DATE_PATTERN = re.compile(r"\b\d{2}[\./-]\d{2}[\./-]\d{2,4}\b")

# ---- ACCESS PDF FROM MANAGED FOLDER (HDFS/S3-compatible) ----
folder = dataiku.Folder("MPJ3zAOO")
file_list = folder.list_paths_in_partition()
pdf_files = [f for f in file_list if f.lower().endswith(".pdf")]
if len(pdf_files) != 1:
    raise Exception(f"Expected exactly one PDF file in folder, found {len(pdf_files)}.")
pdf_filename = pdf_files[0]
pdf_stream = folder.get_download_stream(pdf_filename)
pdf_bytes = io.BytesIO(pdf_stream.read())

# ---- DATE PARSER ----
def try_parse_date(text):
    try:
        text = text.replace("-", ".").replace("/", ".").strip()
        return datetime.strptime(text, "%d.%m.%Y")
    except:
        try:
            return datetime.strptime(text, "%d.%m.%y")
        except:
            return None

# ---- MAIN PROCESS ----
results = {}
with pdfplumber.open(pdf_bytes) as pdf:
    for page_num, page in enumerate(pdf.pages):
        tables = page.extract_tables()
        for table_idx, table in enumerate(tables):
            try:
                df = pd.DataFrame(table)
                df.dropna(how="all", inplace=True)
                if df.shape[1] < 2:
                    continue

                header_row = df.iloc[0].fillna("")
                df.columns = header_row
                df = df[1:]

                # Detect date columns
                date_cols = []
                for col in df.columns:
                    col_clean = str(col).strip()
                    if DATE_PATTERN.match(col_clean):
                        parsed = try_parse_date(col_clean)
                        if parsed:
                            date_cols.append((col_clean, parsed))
                if not date_cols:
                    continue

                date_cols.sort(key=lambda x: x[1], reverse=True)
                latest_col = date_cols[0][0]

                # Search for each keyword not yet found
                for keyword in TARGET_KEYWORDS:
                    if keyword in results:
                        continue  # already found

                    matched_rows = df[df.iloc[:, 0].str.contains(keyword, case=False, na=False)]
                    for _, row in matched_rows.iterrows():
                        value = row.get(latest_col, "")
                        if isinstance(value, str):
                            value = value.strip()
                        if value:
                            results[keyword] = {
                                "Page": page_num + 1,
                                "Table": table_idx + 1,
                                "Keyword": keyword,
                                "Latest_Date": latest_col,
                                "Value": value
                            }
                            break
            except Exception as e:
                print(f"Error on page {page_num+1}, table {table_idx+1}: {e}")
                continue

# ---- FINAL OUTPUT ----
SCB_PDF_Pillar3_df = pd.DataFrame(list(results.values()))

# Write to Dataiku output dataset
output_dataset = dataiku.Dataset("SCB_PDF_Pillar3")
output_dataset.write_with_schema(SCB_PDF_Pillar3_df)
