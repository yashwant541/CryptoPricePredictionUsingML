import streamlit as st
import pandas as pd
from app.email_analyzer import analyze_email_thread
import tempfile
import os

# Set page config
st.set_page_config(
    page_title="Email Role Identifier",
    page_icon="üìß",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    # Custom CSS for better styling
    st.markdown("""
    <style>
        .main .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
        }
        .stDownloadButton button {
            width: 100%;
        }
        .stExpander {
            margin-bottom: 1rem;
        }
        .metric-box {
            border-radius: 10px;
            padding: 15px;
            background-color: #f0f2f6;
            margin-bottom: 20px;
        }
    </style>
    """, unsafe_allow_html=True)

    st.title("üìß Email Role Identification Tool")
    st.markdown("""
    Analyze email threads to automatically identify the **requester** and **approver** based on:
    - Linguistic patterns
    - Temporal positioning
    - Keyword analysis
    - Pronoun detection
    """)

    # File upload in sidebar
    with st.sidebar:
        st.header("Upload Email File")
        uploaded_file = st.file_uploader(
            "Choose a text file containing email thread",
            type=["txt"],
            help="The file should contain raw email text with headers like 'From:', 'To:', etc."
        )
        
        st.markdown("---")
        st.markdown("### Sample Email Format")
        st.code("""From: John Doe <john@example.com>
To: Jane Smith <jane@example.com>
Subject: Approval Request
Sent: Monday, January 1, 2023 10:00 AM

Email body text...""")

    if not uploaded_file:
        st.info("üëà Please upload an email text file to begin analysis")
        return

    # Processing and analysis
    with st.spinner("üîç Analyzing email thread..."):
        try:
            # Create temp file
            with tempfile.NamedTemporaryFile(delete=False, mode='w+', suffix='.txt') as tmp:
                tmp.write(uploaded_file.getvalue().decode('utf-8'))
                tmp_path = tmp.name

            # Read and analyze
            with open(tmp_path, 'r', encoding='utf-8') as f:
                email_text = f.read()
            
            results = analyze_email_thread(email_text)
            
            # Display results
            st.success("‚úÖ Analysis completed successfully!")
            
            # Results summary cards
            col1, col2, col3 = st.columns(3)
            with col1:
                st.markdown('<div class="metric-box">', unsafe_allow_html=True)
                st.metric("First Sender", results["first_sender"], "Cannot be approver")
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                st.markdown('<div class="metric-box">', unsafe_allow_html=True)
                st.metric("Identified Requester", results["requester"])
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col3:
                st.markdown('<div class="metric-box">', unsafe_allow_html=True)
                st.metric("Identified Approver", results["approver"])
                st.markdown('</div>', unsafe_allow_html=True)

            # Tabbed interface
            tab1, tab2, tab3 = st.tabs(["üìú Email Thread", "üìä Role Scores", "üë• Participants"])

            with tab1:
                st.subheader("Email Thread Analysis")
                df_emails = pd.DataFrame(results["parsed_emails"])
                
                # Show condensed view
                st.dataframe(
                    df_emails[["Email Sequence", "Sender", "Receiver", "subject", "date"]],
                    use_container_width=True
                )
                
                # Detailed email view
                st.subheader("Detailed Email Analysis")
                for email in results["parsed_emails"]:
                    with st.expander(f"‚úâÔ∏è Email #{email['Email Sequence']}: {email['subject']}"):
                        col1, col2 = st.columns(2)
                        col1.markdown(f"**From:**\n\n{email['Sender']}")
                        col2.markdown(f"**To:**\n\n{email['Receiver']}")
                        
                        col1, col2 = st.columns(2)
                        col1.markdown(f"**Date:**\n\n{email['date']} {email['time']}")
                        col2.markdown(f"**CC:**\n\n{email['cc'] if email['cc'] else 'None'}")
                        
                        st.markdown("---")
                        st.markdown("**Body:**")
                        st.text(email['email_body'][:1000] + ("..." if len(email['email_body']) > 1000 else ""))
                        
                        if email['approval_statement']:
                            st.markdown("---")
                            with st.container():
                                st.success(f"**Approval Statement:**\n\n{email['approval_statement']}")
                        
                        if email['request_statement']:
                            st.markdown("---")
                            with st.container():
                                st.info(f"**Request Statement:**\n\n{email['request_statement']}")

            with tab2:
                st.subheader("Participant Role Scores")
                st.markdown("""
                Scores are calculated based on:
                - **Keyword matching** (approval/request terms)
                - **Temporal positioning** in thread
                - **Pronoun patterns** in text
                - **First sender** status
                """)
                
                for sender, score_data in results["scores"].items():
                    with st.expander(f"üßë‚Äçüíº {sender} (Approver: {score_data['approver']:.1f} | Requester: {score_data['requester']:.1f})"):
                        tab_a, tab_r = st.tabs(["Approver Score", "Requester Score"])
                        
                        with tab_a:
                            st.write(f"**Total Approver Score:** {score_data['approver']:.1f}")
                            st.write("**Breakdown:**")
                            for detail in [d for d in score_data['details'] if "approver" in d.lower()]:
                                st.write(f"- {detail}")
                        
                        with tab_r:
                            st.write(f"**Total Requester Score:** {score_data['requester']:.1f}")
                            st.write("**Breakdown:**")
                            for detail in [d for d in score_data['details'] if "requester" in d.lower()]:
                                st.write(f"- {detail}")

            with tab3:
                st.subheader("Participant Roles")
                df_roles = pd.DataFrame(results["role_mapping"])
                st.dataframe(df_roles, use_container_width=True)
                
                # Download buttons
                col1, col2 = st.columns(2)
                with col1:
                    st.download_button(
                        label="üì• Download Participant Roles (CSV)",
                        data=df_roles.to_csv(index=False).encode('utf-8'),
                        file_name="Email_Users.csv",
                        mime="text/csv",
                        help="Download the list of participants and their identified roles"
                    )
                
                with col2:
                    st.download_button(
                        label="üì• Download Full Analysis (CSV)",
                        data=pd.DataFrame(results["parsed_emails"]).to_csv(index=False).encode('utf-8'),
                        file_name="parsed_emails.csv",
                        mime="text/csv",
                        help="Download complete email analysis results"
                    )

        except Exception as e:
            st.error(f"‚ùå Error during analysis: {str(e)}")
        finally:
            # Clean up temp file
            if os.path.exists(tmp_path):
                os.unlink(tmp_path)

if __name__ == "__main__":
    main()
