# -*- coding: utf-8 -*-
import dataiku
import pandas as pd, numpy as np
from dataiku import pandasutils as pdu
import pdfplumber
import re
import os
from datetime import datetime

# ---- CONFIG ----
TARGET_KEYWORDS = [
    "Common Equity Tier 1 ratio",
    "Total capital ratio",
    "Leverage ratio",
    "Liquidity coverage ratio"
]

DATE_PATTERN = re.compile(r"\b\d{2}[\./-]\d{2}[\./-]\d{4}\b")

# ---- ACCESS PDF IN MANAGED FOLDER ----
folder = dataiku.Folder("MPJ3zAOO")
folder_path = folder.get_info()

pdf_files = [f for f in os.listdir(folder_path) if f.lower().endswith(".pdf")]
if not pdf_files:
    raise FileNotFoundError("No PDF files found in the folder.")

pdf_path = os.path.join(folder_path, pdf_files[0])

# ---- DATE PARSER ----
def try_parse_date(text):
    try:
        return datetime.strptime(text.replace("-", ".").replace("/", "."), "%d.%m.%Y")
    except:
        return None

# ---- MAIN PROCESS ----
results = []

with pdfplumber.open(pdf_path) as pdf:
    for page_num, page in enumerate(pdf.pages):
        tables = page.extract_tables()
        for table_idx, table in enumerate(tables):
            try:
                df = pd.DataFrame(table)
                df.dropna(how="all", inplace=True)

                if df.shape[1] < 2:
                    continue

                header_row = df.iloc[0].fillna("")
                df.columns = header_row
                df = df[1:]

                # Identify date columns
                date_cols = []
                for col in df.columns:
                    if DATE_PATTERN.match(str(col)):
                        parsed = try_parse_date(col)
                        if parsed:
                            date_cols.append((col, parsed))

                if not date_cols:
                    continue

                date_cols.sort(key=lambda x: x[1], reverse=True)
                latest_col = date_cols[0][0]

                # For each keyword, find first non-empty value
                for keyword in TARGET_KEYWORDS:
                    matched_rows = df[df.iloc[:, 0].str.contains(keyword, case=False, na=False)]
                    for _, row in matched_rows.iterrows():
                        value = row.get(latest_col, "").strip()
                        if value:
                            results.append({
                                "Page": page_num + 1,
                                "Table": table_idx + 1,
                                "Keyword": keyword,
                                "Latest_Date": latest_col,
                                "Value": value
                            })
                            break  # only first non-empty match
            except Exception as e:
                print(f"Error on page {page_num+1}, table {table_idx+1}: {e}")
                continue

# ---- FINAL OUTPUT ----
SCB_PDF_Pillar3_df = pd.DataFrame(results)

# Write recipe outputs
SCB_PDF_Pillar3 = dataiku.Dataset("SCB_PDF_Pillar3")
SCB_PDF_Pillar3.write_with_schema(SCB_PDF_Pillar3_df)
