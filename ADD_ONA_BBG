import pandas as pd
import dataiku
import tempfile
import os
from datetime import datetime

# ------------------------------------------------------
# üîß Configuration ‚Äî Replace with your Dataiku folder IDs
# ------------------------------------------------------
input_folder = dataiku.Folder("YOUR_INPUT_FOLDER_ID")      # üì• Input folder
output_folder = dataiku.Folder("YOUR_OUTPUT_FOLDER_ID")    # üì§ Output folder

# ------------------------------------------------------
# üß† Helper Functions
# ------------------------------------------------------
def looks_like_date(val):
    if isinstance(val, (pd.Timestamp, datetime)):
        return True
    if isinstance(val, str):
        try:
            datetime.strptime(val.strip(), "%d-%b-%y")
            return True
        except:
            return False
    return False

def read_excel_safe(file_path):
    """Read Excel using openpyxl engine for .xlsx"""
    return pd.ExcelFile(file_path, engine="openpyxl")

# ------------------------------------------------------
# üöÄ Main Execution
# ------------------------------------------------------
def main():
    # Step 1: Get the only Excel file in input folder
    input_files = input_folder.list_paths_in_partition()
    if not input_files:
        raise FileNotFoundError("‚ùå No files found in input folder!")

    excel_file_info = input_files[0]
    file_name = os.path.basename(excel_file_info)

    # Step 2: Download Excel file to temp path
    with input_folder.get_download_stream(excel_file_info) as stream:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            tmp.write(stream.read())
            tmp_path = tmp.name

    # Step 3: Load Excel and process each sheet
    xls = read_excel_safe(tmp_path)
    for sheet_name in xls.sheet_names:
        df_raw = pd.read_excel(tmp_path, sheet_name=sheet_name, header=None, engine="openpyxl")

        # Detect stacked tables by rows containing dates
        header_rows = [i for i in range(len(df_raw)) if any(looks_like_date(cell) for cell in df_raw.iloc[i])]
        if not header_rows:
            print(f"‚ö†Ô∏è No tables found in sheet '{sheet_name}', skipping...")
            continue

        all_tables = []
        for idx, header_row in enumerate(header_rows):
            header = df_raw.iloc[header_row].tolist()
            date_in_header = next((cell for cell in header if looks_like_date(cell)), None)
            next_header = header_rows[idx + 1] if idx + 1 < len(header_rows) else len(df_raw)

            data_block = df_raw.iloc[header_row + 1:next_header].dropna(how='all')
            if data_block.empty:
                continue

            data_block = data_block.iloc[:, :len(header)]
            data_block.columns = header
            data_block["Date"] = date_in_header
            all_tables.append(data_block)

        if not all_tables:
            print(f"‚ö†Ô∏è No tables extracted from sheet '{sheet_name}'")
            continue

        final_df = pd.concat(all_tables, ignore_index=True)

        # Step 4: Save sheet CSV to Dataiku output folder
        with tempfile.NamedTemporaryFile(mode="w", suffix=".csv", delete=False, newline='', encoding="utf-8") as tmp_file:
            final_df.to_csv(tmp_file.name, index=False)
            with open(tmp_file.name, "rb") as f:
                output_folder.upload_stream(f"{sheet_name}.csv", f)
            os.remove(tmp_file.name)

        print(f"‚úÖ Sheet '{sheet_name}' saved as CSV: {sheet_name}.csv")

    # Step 5: Cleanup temp Excel
    os.remove(tmp_path)
    print(f"‚úÖ Processing complete for file: {file_name}")

# ------------------------------------------------------
if __name__ == "__main__":
    main()
