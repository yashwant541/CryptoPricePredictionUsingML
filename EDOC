import pandas as pd
import string

# Custom list of stopwords (can be expanded as needed)
BASIC_STOPWORDS = {
    'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours',
    'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers',
    'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves',
    'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are',
    'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does',
    'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until',
    'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into',
    'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down',
    'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here',
    'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',
    'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so',
    'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now'
}

def explode_dataframe_by_keywords(file_path, column_name, output_file, include_stopwords=True):
    """
    Explode DataFrame rows based on keywords in specified column.
    
    Args:
        file_path (str): Path to input file
        column_name (str): Name of column to explode
        output_file (str): Path to output file
        include_stopwords (bool): Whether to include stopwords in output (flagged)
    """
    # Read the input file
    try:
        if file_path.endswith('.csv'):
            df = pd.read_csv(file_path)
        elif file_path.endswith('.xlsx'):
            df = pd.read_excel(file_path)
        else:
            print("Unsupported file format. Please use CSV or Excel files.")
            return
    except Exception as e:
        print(f"Error reading file: {e}")
        return
    
    # Check if column exists
    if column_name not in df.columns:
        print(f"Column '{column_name}' not found in the file.")
        print(f"Available columns: {list(df.columns)}")
        return
    
    # Prepare lists for exploded data
    exploded_rows = []
    
    # Process each row
    for index, row in df.iterrows():
        text = str(row[column_name])
        
        # Remove punctuation and split into words
        translator = str.maketrans('', '', string.punctuation)
        words = text.translate(translator).split()
        
        # Process each word
        for word_pos, word in enumerate(words, 1):  # 1-based position
            word_lower = word.lower()
            is_stopword = word_lower in BASIC_STOPWORDS
            
            if include_stopwords or not is_stopword:
                # Create a new row with all original data plus keyword info
                new_row = row.to_dict()
                new_row.update({
                    'exploded_keyword': word,
                    'is_stopword': is_stopword,
                    'keyword_position': word_pos,
                    'original_text': text
                })
                exploded_rows.append(new_row)
    
    # Create new DataFrame from exploded rows
    if not exploded_rows:
        print("No words found after processing.")
        return
    
    exploded_df = pd.DataFrame(exploded_rows)
    
    # Reorder columns to put new columns at the end
    original_cols = [col for col in df.columns if col != column_name]
    new_cols = ['exploded_keyword', 'is_stopword', 'keyword_position', 'original_text']
    column_order = original_cols + new_cols
    
    # Add the original column if it wasn't included
    if column_name not in column_order:
        column_order.insert(0, column_name)
    
    exploded_df = exploded_df[column_order]
    
    # Save to output file
    try:
        if output_file.endswith('.csv'):
            exploded_df.to_csv(output_file, index=False)
        elif output_file.endswith('.xlsx'):
            exploded_df.to_excel(output_file, index=False)
        else:
            print("Output file format not supported. Using CSV.")
            exploded_df.to_csv(output_file + '.csv', index=False)
        
        print(f"\nSuccessfully saved exploded data to {output_file}")
        print(f"Original rows: {len(df)}")
        print(f"Exploded rows: {len(exploded_df)}")
        print(f"Stopwords included: {exploded_df['is_stopword'].sum()}")
        print("\nNew columns added:")
        print("- exploded_keyword: The individual keyword")
        print("- is_stopword: Boolean indicating if keyword is a stopword")
        print("- keyword_position: Original position in the text (1-based)")
        print("- original_text: The full original text")
    except Exception as e:
        print(f"Error saving output file: {e}")

if __name__ == "__main__":
    print("DataFrame Exploder Tool")
    print("----------------------")
    print("This tool will explode each row into multiple rows based on keywords")
    print("in the specified column, preserving all original data.\n")
    
    # Get user input
    file_path = input("Enter the path to your input file (CSV or Excel): ").strip()
    column_name = input("Enter the column name to explode: ").strip()
    output_file = input("Enter the path for the output file: ").strip()
    
    # Ask about stopwords
    include_stopwords = input("Include stopwords in output? (y/n): ").strip().lower()
    include_stopwords = include_stopwords == 'y'
    
    # Process the file
    explode_dataframe_by_keywords(
        file_path=file_path,
        column_name=column_name,
        output_file=output_file,
        include_stopwords=include_stopwords
    )
