import csv
import os

def display_columns_and_select(file_path, file_type):
    """Display columns and let user select Name and Present columns"""
    try:
        with open(file_path, mode='r', encoding='utf-8-sig') as csvfile:
            reader = csv.reader(csvfile)
            headers = next(reader)  # Get header row
            
            print(f"\n{file_type} file columns:")
            for i, header in enumerate(headers, 1):
                print(f"{i}. {header}")
            
            # Select Name column
            name_col = get_column_selection("Enter the NUMBER for the Name/User column: ", len(headers))
            
            # Select Present column (only for attendance file)
            present_col = None
            if "attendance" in file_type.lower():
                present_col = get_column_selection("Enter the NUMBER for the Present/Attendance column: ", len(headers))
            
            return headers, name_col-1, present_col-1 if present_col else None  # Convert to 0-based index
    
    except Exception as e:
        print(f"Error reading {file_type} file: {e}")
        return None, None, None

def get_column_selection(prompt, max_columns):
    """Get valid column number from user"""
    while True:
        try:
            selection = int(input(prompt).strip())
            if 1 <= selection <= max_columns:
                return selection
            print(f"Please enter a number between 1 and {max_columns}")
        except ValueError:
            print("Please enter a valid number")

def process_attendance():
    print("\n=== CSV Attendance Processor ===")
    print("This tool will separate users based on attendance marks\n")
    
    # Get user list file
    user_list_file = get_file_path("Enter path to user list CSV file: ")
    user_headers, name_col_user, _ = display_columns_and_select(user_list_file, "User list")
    if name_col_user is None:
        return
    
    # Get attendance file
    attendance_file = get_file_path("Enter path to attendance CSV file: ")
    att_headers, name_col_att, present_col = display_columns_and_select(attendance_file, "Attendance")
    if name_col_att is None or present_col is None:
        return
    
    # Get output file names
    not_present_file = input("\nEnter output filename for NOT present users (default: Not_Present.csv): ").strip() or "Not_Present.csv"
    present_file = input("Enter output filename for present users (default: Present.csv): ").strip() or "Present.csv"

    # Process files
    try:
        # Read attendance data
        attendance_data = {}
        with open(attendance_file, mode='r', encoding='utf-8-sig') as csvfile:
            reader = csv.reader(csvfile)
            next(reader)  # Skip header
            for row in reader:
                if len(row) > max(name_col_att, present_col):
                    name = row[name_col_att].strip()
                    status = row[present_col].strip().lower()
                    attendance_data[name] = status
        
        # Process user list
        not_present_users = []
        present_users = []
        missing_in_attendance = []
        
        with open(user_list_file, mode='r', encoding='utf-8-sig') as csvfile:
            reader = csv.reader(csvfile)
            headers = next(reader)
            
            for row in reader:
                if len(row) > name_col_user:
                    name = row[name_col_user].strip()
                    if name in attendance_data:
                        status = attendance_data[name]
                        if status in ['✗', 'x', 'no', 'absent', '0']:
                            not_present_users.append(row)
                        elif status in ['✓', 'v', 'yes', 'present', '1']:
                            present_users.append(row)
                        else:
                            print(f"Warning: Unknown status '{status}' for {name}")
                    else:
                        missing_in_attendance.append(name)
        
        # Save results
        for data, filename in [(not_present_users, not_present_file), 
                             (present_users, present_file)]:
            if data:
                with open(filename, mode='w', encoding='utf-8', newline='') as csvfile:
                    writer = csv.writer(csvfile)
                    writer.writerow(headers)
                    writer.writerows(data)
        
        # Print summary
        print("\nProcessing complete!")
        print(f"- Not present users: {len(not_present_users)} saved to {not_present_file}")
        print(f"- Present users: {len(present_users)} saved to {present_file}")
        if missing_in_attendance:
            print(f"\nWarning: {len(missing_in_attendance)} users not found in attendance file")
            print("First 5 missing users:", ", ".join(missing_in_attendance[:5]))
    
    except Exception as e:
        print(f"\nError during processing: {e}")

def get_file_path(prompt):
    """Get valid file path from user"""
    while True:
        file_path = input(prompt).strip()
        if os.path.isfile(file_path):
            return file_path
        print(f"Error: File '{file_path}' not found. Please try again.")

if __name__ == "__main__":
    process_attendance()
    input("\nPress Enter to exit...")
