from PIL import Image
from collections import Counter
import os

def extract_colors(image_path, output_format="hex"):
    """
    Extract all color codes from an image.

    Args:
        image_path (str): Path to the image file.
        output_format (str): Format of color codes - "hex" or "rgb".

    Returns:
        list: A list of unique colors in the specified format.
    """
    if not os.path.exists(image_path):
        raise FileNotFoundError(f"The file {image_path} does not exist.")

    # Open the image
    image = Image.open(image_path)
    image = image.convert("RGB")  # Ensure the image is in RGB mode

    # Get the colors from the image as a list of RGB tuples
    pixels = list(image.getdata())

    # Count unique colors
    color_counts = Counter(pixels)

    # Convert to the desired format
    if output_format == "hex":
        colors = ["#{:02x}{:02x}{:02x}".format(*color) for color in color_counts.keys()]
    elif output_format == "rgb":
        colors = list(color_counts.keys())
    else:
        raise ValueError("Invalid output_format. Choose either 'hex' or 'rgb'.")

    return colors

# Example usage
if __name__ == "__main__":
    image_file = input("Enter the path to the image file (JPEG or PNG): ")
    format_choice = input("Enter the output format ('hex' or 'rgb'): ").lower()

    try:
        colors = extract_colors(image_file, format_choice)
        print(f"Extracted {len(colors)} unique colors:")
        for color in colors[:10]:  # Display the first 10 colors
            print(color)
        print("\n... (list truncated)")
    except Exception as e:
        print(f"Error: {e}")
