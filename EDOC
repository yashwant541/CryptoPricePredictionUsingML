import dataiku
import extract_msg
import pandas as pd
import tempfile
import shutil
import os
import sys
from datetime import datetime

# Fixed folder handles using Dataiku folder IDs
input_folder = dataiku.Folder("YOUR_INPUT_FOLDER_ID")    # Replace with your input folder ID
output_folder = dataiku.Folder("YOUR_OUTPUT_FOLDER_ID")   # Replace with your output folder ID

def log(message):
    """Logging with flush"""
    print(f"[LOG] {message}", file=sys.stderr, flush=True)

def extract_msg_details(msg_file_path):
    """
    Extract all details from a .msg file
    """
    try:
        msg = extract_msg.Message(msg_file_path)
        
        # Extract message details
        data = {
            "Sender": msg.sender or "",
            "To": msg.to or "",
            "CC": msg.cc or "",
            "BCC": msg.bcc or "",
            "Subject": msg.subject or "",
            "Date": msg.date or "",
            "Body": msg.body or "",
            "Attachments": ", ".join([att.longFilename for att in msg.attachments]) if msg.attachments else "",
            "Filename": os.path.basename(msg_file_path),
            "Processing_Date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # Close the message file to prevent resource leaks
        msg.close()
        return data
        
    except Exception as e:
        log(f"Error processing message file: {str(e)}")
        # Return minimal data with error information
        return {
            "Sender": "",
            "To": "", 
            "CC": "",
            "BCC": "",
            "Subject": f"ERROR_PROCESSING_FILE",
            "Date": "",
            "Body": f"Error: {str(e)}",
            "Attachments": "",
            "Filename": os.path.basename(msg_file_path),
            "Processing_Date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Error": str(e)
        }

def main():
    try:
        log("üîç Searching for .msg files in the input folder...")
        
        # List all files in the input folder
        all_files = input_folder.list_paths_in_partition()
        msg_files = [f for f in all_files if f.lower().endswith(".msg")]
        
        if not msg_files:
            raise Exception("‚ùå No .msg files found in the input folder.")

        log(f"üìß Found {len(msg_files)} .msg file(s) to process")

        processed_count = 0
        error_count = 0
        all_results = []

        for msg_path in msg_files:
            try:
                file_name = os.path.basename(msg_path)
                log(f"üì® Processing: {file_name}")

                # Download .msg file to temp file
                with tempfile.NamedTemporaryFile(suffix=".msg", delete=False) as tmp_msg:
                    tmp_msg_path = tmp_msg.name
                    with input_folder.get_download_stream(msg_path) as stream:
                        shutil.copyfileobj(stream, tmp_msg)

                # Extract message details
                msg_data = extract_msg_details(tmp_msg_path)
                all_results.append(msg_data)
                
                # Clean up temp file
                os.remove(tmp_msg_path)
                
                processed_count += 1
                log(f"‚úÖ Successfully processed: {file_name}")

            except Exception as e:
                error_count += 1
                log(f"‚ùå Failed to process {msg_path}: {str(e)}")
                # Add error record
                all_results.append({
                    "Sender": "",
                    "To": "", 
                    "CC": "",
                    "BCC": "",
                    "Subject": f"ERROR_PROCESSING_FILE",
                    "Date": "",
                    "Body": f"Error processing {msg_path}: {str(e)}",
                    "Attachments": "",
                    "Filename": os.path.basename(msg_path),
                    "Processing_Date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "Error": str(e)
                })

        # Convert all results to DataFrame
        df = pd.DataFrame(all_results)

        # Save to output folder as CSV
        log("üíæ Writing extracted email data to output folder...")
        output_filename = "extracted_emails.csv"
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8-sig', newline='') as tmp_csv:
            df.to_csv(tmp_csv, index=False)
            tmp_csv_path = tmp_csv.name

        # Upload to Dataiku folder
        with open(tmp_csv_path, 'rb') as f:
            output_folder.upload_stream(output_filename, f)

        # Clean up temp file
        os.remove(tmp_csv_path)
        
        log(f"‚úÖ Processing complete: {processed_count} successful, {error_count} errors")
        log(f"üìä Results written to: {output_filename}")

    except Exception as e:
        log(f"üî• ERROR: {str(e)}")
        raise

if __name__ == "__main__":
    main()
