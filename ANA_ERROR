import pandas as pd
import os
import io
import dataiku

# ------------------------------------------------------
# ‚öôÔ∏è CONFIGURATION
# ------------------------------------------------------
use_dataiku = True  # üîÑ Switch between Dataiku and local

if use_dataiku:
    input_folder = dataiku.Folder("INPUT_FOLDER_ID")       # Input CSV files
    match_folder = dataiku.Folder("MATCH_FOLDER_ID")       # For matched output
    notmatch_folder = dataiku.Folder("NOTMATCH_FOLDER_ID") # For unmatched output
else:
    input_folder_path = r"C:\path\to\input"
    match_folder_path = r"C:\path\to\match"
    notmatch_folder_path = r"C:\path\to\notmatch"

def process_file(file_path, file_name):
    df = pd.read_csv(file_path)

    # --- Define column pair mappings ---
    mappings = [
        ("AB1", "C1"),
        ("AB1 Category", "C111"),
        ("AB2", "C11"),
        ("AB2 Category", "C111"),
        ("AB3", "C2"),
        ("AB3 Category", "C2 Category"),
        ("AB4", "C3"),
        ("AB4 Category", "C3 Category")
    ]

    match_rows = []
    notmatch_rows = []

    for _, row in df.iterrows():
        is_match = True
        for col_a, col_b in mappings:
            if col_a in df.columns and col_b in df.columns:
                val_a = str(row[col_a]).strip() if not pd.isna(row[col_a]) else ""
                val_b = str(row[col_b]).strip() if not pd.isna(row[col_b]) else ""
                if val_a != val_b:
                    is_match = False
                    break
        if is_match:
            match_rows.append(row.to_dict())
        else:
            notmatch_rows.append(row.to_dict())

    match_df = pd.DataFrame(match_rows)
    notmatch_df = pd.DataFrame(notmatch_rows)

    # File names with suffix
    match_file_name = os.path.splitext(file_name)[0] + "_match.csv"
    notmatch_file_name = os.path.splitext(file_name)[0] + "_notmatch.csv"

    # ‚úÖ Save only if there are rows
    if use_dataiku:
        if not match_df.empty:
            buffer = io.StringIO()
            match_df.to_csv(buffer, index=False)
            match_folder.upload_stream(match_file_name, io.BytesIO(buffer.getvalue().encode("utf-8")))

        if not notmatch_df.empty:
            buffer = io.StringIO()
            notmatch_df.to_csv(buffer, index=False)
            notmatch_folder.upload_stream(notmatch_file_name, io.BytesIO(buffer.getvalue().encode("utf-8")))
    else:
        os.makedirs(match_folder_path, exist_ok=True)
        os.makedirs(notmatch_folder_path, exist_ok=True)
        if not match_df.empty:
            match_df.to_csv(os.path.join(match_folder_path, match_file_name), index=False)
        if not notmatch_df.empty:
            notmatch_df.to_csv(os.path.join(notmatch_folder_path, notmatch_file_name), index=False)

    print(f"‚úÖ {file_name}: {len(match_df)} matched, {len(notmatch_df)} not matched")

# ------------------------------------------------------
# üöÄ Main Execution
# ------------------------------------------------------
if use_dataiku:
    for path in input_folder.list_paths_in_partition():
        if path.endswith(".csv"):
            file_name = os.path.basename(path)
            with input_folder.get_download_stream(path) as f:
                df = pd.read_csv(f)
                temp_path = f"/tmp/{file_name}"
                df.to_csv(temp_path, index=False)
                process_file(temp_path, file_name)
else:
    for filename in os.listdir(input_folder_path):
        if filename.endswith(".csv"):
            process_file(os.path.join(input_folder_path, filename), filename)
