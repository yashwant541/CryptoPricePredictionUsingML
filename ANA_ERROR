import pandas as pd
import dataiku
import tempfile
import os

# ------------------------------------------------------
# üîß Configuration ‚Äî replace with your Dataiku folder IDs
# ------------------------------------------------------
input_folder = dataiku.Folder("YOUR_INPUT_FOLDER_ID")
output_folder = dataiku.Folder("YOUR_OUTPUT_FOLDER_ID")

# ------------------------------------------------------
# üè∑Ô∏è Column Mappings (fill these in manually)
# ------------------------------------------------------
A_columns = {
    "A1": "ColumnName_A1",
    "A2": "ColumnName_A2",
    "A3": "ColumnName_A3",
    "A4": "ColumnName_A4"
}

B_columns = {
    "B1": "ColumnName_B1",
    "B2": "ColumnName_B2",
    "B3": "ColumnName_B3",
    "B4": "ColumnName_B4"
}

C_columns = {
    "C1": "ColumnName_C1",
    "C1_Category": "ColumnName_C1_Category",
    "C2": "ColumnName_C2",
    "C2_Category": "ColumnName_C2_Category",
    "C3": "ColumnName_C3",
    "C3_Category": "ColumnName_C3_Category",
    "C4": "ColumnName_C4",
    "C4_Category": "ColumnName_C4_Category"
}

# ------------------------------------------------------
# üß† Core Logic
# ------------------------------------------------------
def process_file(file_path, file_name):
    """Reads a file, applies A/B logic, and returns processed DataFrame."""
    if file_path.endswith(".csv"):
        df = pd.read_csv(file_path)
    else:
        df = pd.read_excel(file_path, engine="openpyxl")

    output = pd.DataFrame()
    output["Category"] = df["Category"]
    output["Tenor"] = df["Tenor"]

    # Compare A/B columns and mark source
    for i in range(1, 5):
        a_col = A_columns.get(f"A{i}")
        b_col = B_columns.get(f"B{i}")
        ab_col = f"AB{i}"
        ab_cat_col = f"AB{i} Category"

        if a_col not in df.columns or b_col not in df.columns:
            print(f"‚ö†Ô∏è Missing columns for {ab_col} in {file_name}")
            output[ab_col] = None
            output[ab_cat_col] = None
            continue

        output[ab_col] = df[a_col].where(df[a_col].notna() & (df[a_col].astype(str).str.upper() != "N/A"),
                                         df[b_col])
        output[ab_cat_col] = df[a_col].apply(
            lambda x: "D-1" if pd.notna(x) and str(x).strip().upper() != "N/A" else "D-4"
        )

    # Add C columns
    for key, col_name in C_columns.items():
        output[key] = df[col_name] if col_name in df.columns else None

    return output


# ------------------------------------------------------
# üöÄ Main Execution
# ------------------------------------------------------
def main():
    print("üîç Reading input files from Dataiku folder...")

    # Collect all supported files
    input_files = [f for f in input_folder.list_paths_in_partition() if f.endswith(('.csv', '.xlsx'))]
    if not input_files:
        raise Exception("‚ùå No input files found in input folder.")

    for file_path in input_files:
        file_name = os.path.basename(file_path)
        print(f"üìÇ Processing file: {file_name}")

        with input_folder.get_download_stream(file_path) as stream:
            with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(file_name)[1]) as tmp:
                tmp.write(stream.read())
                tmp_path = tmp.name

        # Process and save output
        processed_df = process_file(tmp_path, file_name)
        processed_filename = os.path.splitext(file_name)[0] + "_Processed.csv"

        with tempfile.NamedTemporaryFile(mode="w", suffix=".csv", delete=False, newline='', encoding="utf-8") as tmp_out:
            processed_df.to_csv(tmp_out.name, index=False)
            with open(tmp_out.name, "rb") as f:
                output_folder.upload_stream(processed_filename, f)
            os.remove(tmp_out.name)

        os.remove(tmp_path)
        print(f"‚úÖ Saved: {processed_filename}")

    print("üéâ All files processed and saved individually.")


# ------------------------------------------------------
if __name__ == "__main__":
    main()
