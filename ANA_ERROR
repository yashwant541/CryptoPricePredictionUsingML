import pandas as pd
import dataiku
import tempfile
import os

# ------------------------------------------------------
# üîß Configuration ‚Äî Replace with your Dataiku folder IDs
# ------------------------------------------------------
input_folder = dataiku.Folder("XXXXXXXXX")     # üì• Input folder
output_folder = dataiku.Folder("YYYYYYYYY")    # üì§ Output folder

# ------------------------------------------------------
# üß† File-Specific Operations Configuration
# ------------------------------------------------------
# You can mix "prefix" and "new_column" operations
file_operations = {
    "file1.csv": {"type": "prefix", "column": "TEXT", "prefix": "TYLER "},
    "file2.csv": {"type": "prefix", "column": "MYSA", "prefix": "STEVE "},
    "file3.csv": {"type": "new_column", "column": "TYPE", "value": "MIBOR"},
    "file4.csv": {"type": "prefix", "column": "DESC", "prefix": "ALEX "},
    "file5.csv": {"type": "prefix", "column": "TITLE", "prefix": "MORGAN "}
}

# ------------------------------------------------------
# üß© Helper Function ‚Äî Load CSV file from Dataiku folder
# ------------------------------------------------------
def load_file_from_folder(folder, filename):
    """Find and load a CSV file from a Dataiku folder."""
    for path in folder.list_paths_in_partition():
        if os.path.basename(path) == filename:
            with folder.get_download_stream(path) as stream:
                with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as tmp:
                    tmp.write(stream.read())
                    tmp_path = tmp.name
            df = pd.read_csv(tmp_path, dtype=str)  # keep all values as strings
            os.remove(tmp_path)
            return df
    raise FileNotFoundError(f"‚ùå File '{filename}' not found in folder {folder.get_id()}!")

# ------------------------------------------------------
# üöÄ Main Execution
# ------------------------------------------------------
def main():
    print("üìÇ Scanning input folder for files...")
    all_files = [os.path.basename(p) for p in input_folder.list_paths_in_partition()]
    print(f"üîç Found {len(all_files)} file(s): {all_files}")

    for file_name, cfg in file_operations.items():
        if file_name not in all_files:
            print(f"‚ö†Ô∏è Skipping '{file_name}' ‚Äî not found in folder.")
            continue

        print(f"\n‚û°Ô∏è Processing file: {file_name}")

        # Load CSV
        df = load_file_from_folder(input_folder, file_name)

        # Perform operation
        if cfg["type"] == "prefix":
            col = cfg["column"]
            prefix = cfg["prefix"]
            print(f"   üß© Operation: Add prefix '{prefix}' to column '{col}'")
            if col in df.columns:
                df[col] = df[col].fillna("").astype(str)
                df[col] = prefix + df[col]
                print(f"   ‚úÖ Prefix added successfully.")
            else:
                print(f"   ‚ö†Ô∏è Column '{col}' not found ‚Äî skipping prefix addition.")
                continue

        elif cfg["type"] == "new_column":
            col = cfg["column"]
            value = cfg["value"]
            print(f"   üß© Operation: Create new column '{col}' with value '{value}'")
            df[col] = value
            print(f"   ‚úÖ Column '{col}' created successfully.")

        else:
            print(f"‚ö†Ô∏è Unknown operation type for {file_name}. Skipping.")
            continue

        # Save modified file to output folder
        with tempfile.NamedTemporaryFile(mode="w+b", suffix=".csv", delete=False) as tmp_out:
            df.to_csv(tmp_out.name, index=False, encoding="utf-8-sig")
            with open(tmp_out.name, "rb") as f:
                output_folder.upload_stream(file_name, f)
            os.remove(tmp_out.name)

        print(f"üíæ Saved updated '{file_name}' to output folder.")

    print("\n‚úÖ All configured files processed successfully!")

# ------------------------------------------------------
if __name__ == "__main__":
    main()
