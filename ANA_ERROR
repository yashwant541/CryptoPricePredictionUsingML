import pdfplumber
import pandas as pd
import re

# ---- CONFIGURATION ----
PDF_PATH = "path/to/your/document.pdf"  # Replace with Dataiku folder path if needed
TARGET_KEYWORDS = [
    "Net Interest Income", 
    "Operating Profit", 
    "Total Assets"
]

# Regex pattern to detect quarter headers like 'Q1 FY25' or 'Jun 2025'
QUARTER_PATTERN = re.compile(r"(Q[1-4]\s?FY\d{2})|([A-Za-z]{3,9}\s20\d{2})", re.IGNORECASE)

# ---- RESULTS STORAGE ----
results = []

# ---- PROCESSING ----
with pdfplumber.open(PDF_PATH) as pdf:
    for page_num, page in enumerate(pdf.pages):
        tables = page.extract_tables()
        for table_idx, table in enumerate(tables):
            try:
                df = pd.DataFrame(table)
                df.dropna(how="all", inplace=True)  # remove empty rows

                # Check for presence of quarter headers in columns
                header_row = df.iloc[0].fillna("")
                quarter_cols = [i for i, col in enumerate(header_row) if QUARTER_PATTERN.match(col)]

                if not quarter_cols or df.shape[1] < 2:
                    continue  # Not a relevant table

                # Build new df with header
                df.columns = header_row
                df = df[1:]

                # Search for each keyword
                for keyword in TARGET_KEYWORDS:
                    matched_rows = df[df.iloc[:, 0].str.contains(keyword, case=False, na=False)]

                    if not matched_rows.empty:
                        # Assume first match is most relevant
                        row = matched_rows.iloc[0]

                        # Extract quarter values
                        available_quarters = [col for col in df.columns if QUARTER_PATTERN.match(col)]
                        if not available_quarters:
                            continue
                        
                        # Sort quarters chronologically (simplified - assumes order left to right = newest to oldest)
                        latest_quarter = available_quarters[0]

                        # Store result
                        results.append({
                            "Page": page_num + 1,
                            "Table": table_idx + 1,
                            "Keyword": keyword,
                            "Latest_Quarter": latest_quarter,
                            "Value": row[latest_quarter]
                        })
            except Exception as e:
                print(f"Error on page {page_num+1} table {table_idx+1}: {e}")
                continue

# ---- FINAL OUTPUT ----
df_results = pd.DataFrame(results)
print(df_results)

# Optional: Save results to a Dataiku dataset
# import dataiku
# output_dataset = dataiku.Dataset("extracted_quarterly_values")
# output_dataset.write_with_schema(df_results)
