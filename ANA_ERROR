import pandas as pd
import dataiku
import tempfile
import os

# ------------------------------------------------------
# üîß Configuration (replace with your Dataiku folder IDs)
# ------------------------------------------------------
input_folder = dataiku.Folder("XXXXXXX")      # Folder containing the Excel files
output_folder = dataiku.Folder("XXXXXXX")    # Folder to save consolidated output

# ------------------------------------------------------
# üß† Helper Functions
# ------------------------------------------------------
def extract_country_date(filename):
    """
    Extract country code and file date from filename.
    Assumes filename format: ORIGAMI_XXX_COUNTRY_FILEDATE_XXXXX.xlsx
    """
    parts = filename.split("_")
    country = parts[2] if len(parts) > 2 else ""
    file_date = parts[3] if len(parts) > 3 else ""
    return country, file_date

def read_excel_safe(file_path):
    """
    Read an Excel file safely:
    - Tries openpyxl for .xlsx
    - Uses pyxlsb for .xlsb or binary Excel
    """
    try:
        if file_path.endswith('.xlsb'):
            return pd.read_excel(file_path, engine='pyxlsb')
        else:
            return pd.read_excel(file_path, engine='openpyxl')
    except Exception:
        # fallback for mis-labeled binary xlsx
        try:
            return pd.read_excel(file_path, engine='pyxlsb')
        except Exception as e2:
            raise Exception(f"Failed to read Excel file '{file_path}': {e2}")

def process_file(file_path, file_name):
    """
    Transform Excel table to long format:
    FileName | Country | FileDate | Tenure | Rate | Factor | Rationale | Final Rate
    """
    df = read_excel_safe(file_path)
    country, file_date = extract_country_date(file_name)
    tenures = df.columns[1:]  # All columns after 'Determining Factor'

    output_rows = []

    for col in tenures:
        col_values = df[col].tolist()
        rate = None
        factor = None

        # Pick first non-N/A value from rows 2-6 (index 1-5)
        for idx in range(1, 6):
            val = col_values[idx]
            if pd.notna(val) and str(val).strip().upper() != "N/A":
                rate = val
                factor = idx+1  # subtract 1 if needed
                break

        # Rationale
        rationale_row = df[df.iloc[:, 0] == "Rational for Proposing the Adjustment"]
        rationale = rationale_row.iloc[0, df.columns.get_loc(col)] if not rationale_row.empty else ""

        # Final Rate
        final_rate_row = df[df.iloc[:, 0] == "Final Rate"]
        final_rate = final_rate_row.iloc[0, df.columns.get_loc(col)] if not final_rate_row.empty else ""

        output_rows.append({
            "FileName": file_name,
            "Country": country,
            "FileDate": file_date,
            "Tenure": col,
            "Rate": rate,
            "Factor": factor,
            "Rationale": rationale,
            "Final Rate": final_rate
        })

    return output_rows

# ------------------------------------------------------
# üöÄ Main Execution
# ------------------------------------------------------
def main():
    print("üîç Reading Excel files from Dataiku input folder...")

    # List all Excel files in the Dataiku input folder
    excel_files = [f for f in input_folder.list_paths_in_partition() if f.endswith(('.xlsx', '.xlsb'))]
    if not excel_files:
        raise Exception("‚ùå No Excel files found in input folder.")

    all_data = []

    for file_path in excel_files:
        file_name = os.path.basename(file_path)
        with input_folder.get_download_stream(file_path) as stream:
            # Save temporary local copy to read
            with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(file_name)[1]) as tmp_file:
                tmp_file.write(stream.read())
                tmp_file_path = tmp_file.name

        # Process file
        all_data.extend(process_file(tmp_file_path, file_name))
        os.remove(tmp_file_path)

    # Convert to DataFrame
    output_df = pd.DataFrame(all_data)

    # Save consolidated output to Dataiku folder
    with tempfile.NamedTemporaryFile(mode="w", suffix=".csv", delete=False, newline='', encoding="utf-8") as tmp_file:
        output_df.to_csv(tmp_file.name, index=False)
        with open(tmp_file.name, "rb") as f:
            output_folder.upload_stream("Excel_Long_Format_Consolidated.csv", f)
        os.remove(tmp_file.name)

    print(f"‚úÖ Processing complete: {len(output_df)} rows created.")

# ------------------------------------------------------
if __name__ == "__main__":
    main()
