import os
import re
import pandas as pd
import tempfile
from extract_msg import Message

# üîÅ Switch between Dataiku and Local mode
USE_DATAIKU = True   # Set to False for local testing

if USE_DATAIKU:
    import dataiku


# ------------------------------------------------------
# üîß Configuration
# ------------------------------------------------------
if USE_DATAIKU:
    input_folder = dataiku.Folder("YOUR_INPUT_FOLDER_ID")   # e.g. "pwBGEpop"
    output_folder = dataiku.Folder("YOUR_OUTPUT_FOLDER_ID") # e.g. "pwBGEpop"
else:
    input_path = r"C:\Users\2011747\Desktop\Input"
    output_path = r"C:\Users\2011747\Desktop\Output"
    os.makedirs(output_path, exist_ok=True)


# ------------------------------------------------------
# üß† Helper Functions
# ------------------------------------------------------
def extract_date_from_filename(filename):
    """Extract date from filename like '04-Apr-2025'."""
    name_without_ext = os.path.splitext(filename)[0]
    match = re.search(r"(\d{1,2}[- ]?[A-Za-z]{3,9}[- ]?\d{2,4})", name_without_ext)
    if match:
        return match.group(1).strip()
    return "Unknown Date"


def extract_email_body(msg_path):
    """Extract the body text from a .msg file."""
    msg = Message(msg_path)
    body = msg.body or ""
    return re.sub(r'\r\n', '\n', body).strip()


def save_output_file(output_filename, text):
    """Save file locally or in Dataiku using upload_stream()."""
    if USE_DATAIKU:
        # ‚úÖ Create a temporary file and upload to Dataiku
        with tempfile.NamedTemporaryFile(mode="w+", suffix=".txt", delete=False, encoding="utf-8") as tmp_file:
            tmp_file.write(text)
            tmp_file.flush()
            tmp_file.seek(0)
            tmp_file_name = tmp_file.name

        # Upload to Dataiku managed folder
        with open(tmp_file_name, "rb") as f:
            output_folder.upload_stream(output_filename, f)

        os.remove(tmp_file_name)

    else:
        # Local save
        output_file_path = os.path.join(output_path, output_filename)
        with open(output_file_path, "w", encoding="utf-8") as f:
            f.write(text)


# ------------------------------------------------------
# üöÄ Main Processing
# ------------------------------------------------------
def main():
    if USE_DATAIKU:
        files = [f for f in input_folder.list_paths_in_partition() if f.lower().endswith(".msg")]
    else:
        files = [os.path.join(input_path, f) for f in os.listdir(input_path) if f.lower().endswith(".msg")]

    if not files:
        print("‚ö†Ô∏è No .msg files found in input folder.")
        return

    for file_path in files:
        try:
            filename = os.path.basename(file_path)
            date_text = extract_date_from_filename(filename)
            print(f"üìß Processing: {filename} ({date_text})")

            if USE_DATAIKU:
                # Download .msg file from Dataiku into temp file
                with input_folder.get_download_stream(file_path) as stream:
                    tmp_msg = tempfile.NamedTemporaryFile(delete=False, suffix=".msg")
                    tmp_msg.write(stream.read())
                    tmp_msg.close()
                    msg_path = tmp_msg.name
            else:
                msg_path = file_path

            # Extract email body
            body_text = extract_email_body(msg_path)

            if USE_DATAIKU:
                os.remove(msg_path)

            if not body_text.strip():
                print(f"‚ö†Ô∏è No body text found in {filename}")
                continue

            output_filename = f"{os.path.splitext(filename)[0]}_body.txt"
            save_output_file(output_filename, body_text)
            print(f"‚úÖ Saved: {output_filename}")

        except Exception as e:
            print(f"‚ùå Error processing {file_path}: {e}")


# ------------------------------------------------------
if __name__ == "__main__":
    main()
