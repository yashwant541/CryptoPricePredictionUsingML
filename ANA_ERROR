import pandas as pd
import dataiku
import tempfile
import os
import pdfplumber

# ------------------------------------------------------
# üîß Configuration ‚Äî Replace with your Dataiku folder IDs
# ------------------------------------------------------
input_folder = dataiku.Folder("XXXXXXX")     # üì• Input PDF folder
output_folder = dataiku.Folder("XXXXXXX")    # üì§ Output Excel folder

# ------------------------------------------------------
# üß† Helper ‚Äî Extract tables from PDF and save as Excel
# ------------------------------------------------------
def extract_tables_from_pdf(pdf_path, output_path):
    """Extracts all tables from a PDF and saves them as sheets in an Excel file."""
    tables = []
    with pdfplumber.open(pdf_path) as pdf:
        for page_num, page in enumerate(pdf.pages, start=1):
            page_tables = page.extract_tables()
            for t_index, table in enumerate(page_tables, start=1):
                if table:
                    df = pd.DataFrame(table)
                    # Try to treat first row as header if it looks like one
                    if len(df) > 1 and all(isinstance(x, str) for x in df.iloc[0]):
                        df.columns = df.iloc[0]
                        df = df[1:]
                    df.reset_index(drop=True, inplace=True)
                    tables.append(df)

    if not tables:
        return 0  # no tables found

    # Save all tables into one Excel file (each on a separate sheet)
    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
        for i, df in enumerate(tables, start=1):
            sheet_name = f"Table_{i}"
            df.to_excel(writer, sheet_name=sheet_name, index=False)
    return len(tables)

# ------------------------------------------------------
# üöÄ Main Execution
# ------------------------------------------------------
def main():
    print("üìÇ Reading PDFs from Dataiku input folder...")

    input_files = input_folder.list_paths_in_partition()

    for file_path in input_files:
        if not file_path.lower().endswith(".pdf"):
            continue

        file_name = os.path.basename(file_path)
        base_name = os.path.splitext(file_name)[0]
        print(f"üîç Processing {file_name}...")

        # Create temporary local copies
        with input_folder.get_download_stream(file_path) as pdf_stream:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
                tmp_pdf.write(pdf_stream.read())
                tmp_pdf.flush()

                with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp_xlsx:
                    num_tables = extract_tables_from_pdf(tmp_pdf.name, tmp_xlsx.name)

                    if num_tables > 0:
                        with open(tmp_xlsx.name, "rb") as f:
                            output_folder.upload_stream(f"{base_name}.xlsx", f)
                        print(f"‚úÖ {file_name}: Extracted {num_tables} table(s).")
                    else:
                        print(f"‚ö†Ô∏è {file_name}: No tables found.")

        # Clean up temp files
        if os.path.exists(tmp_pdf.name):
            os.remove(tmp_pdf.name)
        if os.path.exists(tmp_xlsx.name):
            os.remove(tmp_xlsx.name)

    print("üèÅ Extraction completed for all PDF files!")

# ------------------------------------------------------
if __name__ == "__main__":
    main()
