import pandas as pd
import dataiku
import tempfile
import os
import re

# ------------------------------------------------------
# 🔧 Configuration — Replace with your Dataiku folder IDs
# ------------------------------------------------------
input_folder_1 = dataiku.Folder("XXXXXXX")     # 📥 Folder 1 (e.g. old rates)
input_folder_2 = dataiku.Folder("XXXXXXX")     # 📥 Folder 2 (e.g. new rates)
output_folder = dataiku.Folder("XXXXXXX")      # 📤 Output folder

# ------------------------------------------------------
# 🧠 Global Variables (edit these for your run)
# ------------------------------------------------------
file_1_name = "HIBOR_CNH.csv"           # file name in folder 1
file_2_name = "HIBOR HKD&CNH.csv"       # file name in folder 2

# Columns for file 1
date_col_1 = "Date"
type_col_1 = "Currency"
tenure_col_1 = "Tenure"
rate_col_1 = "Value"

# Columns for file 2
date_col_2 = "Date"
type_col_2 = "Fixing Index"
tenure_col_2 = "Tenor"
rate_col_2 = "Fixing Rate"

# ------------------------------------------------------
# 🧩 Helper Function — Normalize Tenure
# ------------------------------------------------------
def normalize_tenure(val):
    """Normalize Tenure strings like 'O/N' → 'ON', '1Y ' → '1Y'."""
    if pd.isna(val):
        return None
    val = str(val).strip().upper()
    val = re.sub(r'[^A-Z0-9]', '', val)  # remove special chars like '/', '-', etc.
    return val

# ------------------------------------------------------
# 🚀 Main Execution
# ------------------------------------------------------
def main():
    # -------------------------------
    # 📥 Load files from both folders
    # -------------------------------
    def load_file(folder, filename):
        for path in folder.list_paths_in_partition():
            if os.path.basename(path) == filename:
                with folder.get_download_stream(path) as stream:
                    with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(filename)[1]) as tmp:
                        tmp.write(stream.read())
                        tmp_path = tmp.name
                if filename.lower().endswith(".csv"):
                    df = pd.read_csv(tmp_path)
                elif filename.lower().endswith((".xls", ".xlsx")):
                    df = pd.read_excel(tmp_path)
                else:
                    raise ValueError(f"Unsupported file type: {filename}")
                os.remove(tmp_path)
                return df
        raise FileNotFoundError(f"❌ File '{filename}' not found in folder {folder.get_id()}!")

    print("📂 Reading files...")
    df1 = load_file(input_folder_1, file_1_name)
    df2 = load_file(input_folder_2, file_2_name)

    # -------------------------------
    # 🧹 Clean + Normalize Columns
    # -------------------------------
    df1["__Date"] = pd.to_datetime(df1[date_col_1], errors="coerce")
    df2["__Date"] = pd.to_datetime(df2[date_col_2], errors="coerce")

    df1["__Type"] = df1[type_col_1].astype(str).str.strip().str.upper()
    df2["__Type"] = df2[type_col_2].astype(str).str.strip().str.upper()

    df1["__Tenure"] = df1[tenure_col_1].apply(normalize_tenure)
    df2["__Tenure"] = df2[tenure_col_2].apply(normalize_tenure)

    df1["__Rate"] = pd.to_numeric(df1[rate_col_1], errors="coerce").round(3)
    df2["__Rate"] = pd.to_numeric(df2[rate_col_2], errors="coerce").round(3)

    # -------------------------------
    # 🔗 Merge and Compare
    # -------------------------------
    merged_df = pd.merge(
        df1,
        df2,
        how="outer",
        left_on=["__Date", "__Type", "__Tenure"],
        right_on=["__Date", "__Type", "__Tenure"],
        suffixes=("_File1", "_File2")
    )

    # ✅ Compare rounded rates
    merged_df["Match"] = merged_df["__Rate_File1"].eq(merged_df["__Rate_File2"])

    # ➕ Add rate difference column (3 decimal precision)
    merged_df["Rate Difference"] = (
        (merged_df["__Rate_File2"] - merged_df["__Rate_File1"])
        .round(3)
    )

    # -------------------------------
    # 💾 Save result to Dataiku output
    # -------------------------------
    output_filename = "comparison_result.csv"
    with tempfile.NamedTemporaryFile(mode="w+b", suffix=".csv", delete=False) as tmp_out:
        merged_df.to_csv(tmp_out.name, index=False, encoding="utf-8-sig")
        with open(tmp_out.name, "rb") as f:
            output_folder.upload_stream(output_filename, f)
        os.remove(tmp_out.name)

    print(f"✅ Comparison completed and saved to output folder as '{output_filename}'!")

# ------------------------------------------------------
if __name__ == "__main__":
    main()
