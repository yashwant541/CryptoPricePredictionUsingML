import pandas as pd
import os
import glob

# ------------------ USER CONFIG ------------------
DATAIKU_MODE = False  # Set True if running in Dataiku
input_folder = r"your_input_folder_path"   # Used if DATAIKU_MODE=False
output_folder = r"your_output_folder_path" # Used if DATAIKU_MODE=False
# -------------------------------------------------

if DATAIKU_MODE:
    import dataiku
    input_folder = dataiku.Folder("INPUT_FOLDER_ID").get_path()
    output_folder_obj = dataiku.Folder("OUTPUT_FOLDER_ID")
    output_folder_obj_path = output_folder_obj.get_path()
    os.makedirs(output_folder_obj_path, exist_ok=True)

# Define mapping of tenures to Val columns
tenure_mapping = {
    '1 Week': ['Val1', 'Val2'],
    '1 Month': ['Val3', 'Val4'],
    '3 Months': ['Val5', 'Val6'],
    '6 Months': ['Val7', 'Val8'],
    '1 Year': ['Val9', 'Val10']
}

def process_row(row):
    if row.name == 0:  # Only first row (AVERAGE ATM VOL) is averaged
        new_row = {'Keyword': row['Keyword']}
        for tenure, vals in tenure_mapping.items():
            nums = pd.to_numeric(row[vals], errors='coerce')
            new_row[tenure] = nums.mean()
        return pd.Series(new_row)
    else:
        # For other rows, take first non-empty value in each Val pair
        new_row = {'Keyword': row['Keyword']}
        for tenure, vals in tenure_mapping.items():
            for val in vals:
                if row[val] not in ['', None]:
                    new_row[tenure] = row[val]
                    break
        return pd.Series(new_row)

# ------------------ PROCESS FILES ------------------
for file_path in glob.glob(os.path.join(input_folder, "*.xlsx")):
    try:
        df = pd.read_excel(file_path)
        df_processed = df.apply(process_row, axis=1)
        df_long = df_processed.melt(id_vars='Keyword', var_name='Tenure', value_name='Value')

        if DATAIKU_MODE:
            # Save wide format
            wide_name = os.path.basename(file_path)
            wide_file_path = os.path.join(output_folder_obj_path, wide_name)
            df_processed.to_excel(wide_file_path, index=False)
            output_folder_obj.upload_stream(wide_file_path, wide_name)

            # Save long format
            long_name = os.path.splitext(os.path.basename(file_path))[0] + "_long.xlsx"
            long_file_path = os.path.join(output_folder_obj_path, long_name)
            df_long.to_excel(long_file_path, index=False)
            output_folder_obj.upload_stream(long_file_path, long_name)

        else:
            # Local save
            wide_output_path = os.path.join(output_folder, os.path.basename(file_path))
            df_processed.to_excel(wide_output_path, index=False)

            long_output_path = os.path.join(output_folder, os.path.splitext(os.path.basename(file_path))[0] + "_long.xlsx")
            df_long.to_excel(long_output_path, index=False)

        print(f"Processed: {os.path.basename(file_path)}")
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
