import pandas as pd
import os
import io
import dataiku

# ------------------------------------------------------
# ⚙️ CONFIGURATION
# ------------------------------------------------------
use_dataiku = True   # 🔄 Switch between Dataiku and local mode

if use_dataiku:
    input_folder = dataiku.Folder("INPUT_FOLDER_ID")     # 📥 Input folder containing the summary file
    output_folder = dataiku.Folder("OUTPUT_FOLDER_ID")   # 📤 Output folder for results
else:
    input_path = r"C:\path\to\maker_checker_summary.csv" # Local path to the single summary file
    output_path = r"C:\path\to\output\folder"
    os.makedirs(output_path, exist_ok=True)

# ------------------------------------------------------
# 🧠 EXPECTED STATUS VALUES
# ------------------------------------------------------
expected_statuses = {"Calculated", "Proposed", "Approved", "Submitted"}

# ------------------------------------------------------
# 📚 READ THE SINGLE SUMMARY FILE
# ------------------------------------------------------
if use_dataiku:
    # Get first file path from folder
    file_list = input_folder.list_paths_in_partition()
    if not file_list:
        raise ValueError("❌ No files found in the input folder.")
    
    file_path = file_list[0]
    file_name = os.path.basename(file_path)
    print(f"📥 Reading summary file: {file_name}...")
    
    with input_folder.get_download_stream(file_path) as stream:
        if file_name.lower().endswith(".csv"):
            summary = pd.read_csv(stream)
        elif file_name.lower().endswith(".xlsx"):
            summary = pd.read_excel(stream)
        else:
            raise ValueError("❌ Unsupported file format. Please use CSV or XLSX.")
else:
    print(f"📥 Reading local summary file: {input_path}...")
    if input_path.lower().endswith(".csv"):
        summary = pd.read_csv(input_path)
    elif input_path.lower().endswith(".xlsx"):
        summary = pd.read_excel(input_path)
    else:
        raise ValueError("❌ Unsupported file format. Please use CSV or XLSX.")

# ------------------------------------------------------
# 🧩 VALIDATE REQUIRED COLUMNS
# ------------------------------------------------------
required_cols = ["FileDate", "Benchmark", "Status"]
missing_cols = [col for col in required_cols if col not in summary.columns]
if missing_cols:
    raise ValueError(f"❌ Missing required columns: {missing_cols}")

# ------------------------------------------------------
# 🧹 CLEANUP & NORMALIZE
# ------------------------------------------------------
summary["Status"] = summary["Status"].astype(str).str.strip().str.title()

# ------------------------------------------------------
# 📊 GROUP & FLAG MISSING STATUS COMBINATIONS
# ------------------------------------------------------
status_summary = (
    summary.groupby(["FileDate", "Benchmark"])["Status"]
    .agg(lambda x: set(x))
    .reset_index()
)

status_summary["Missing_Statuses"] = status_summary["Status"].apply(
    lambda s: list(expected_statuses - s)
)
status_summary["Flag"] = status_summary["Missing_Statuses"].apply(lambda x: len(x) > 0)

flagged = status_summary[status_summary["Flag"]].copy()

# ------------------------------------------------------
# 🧾 MERGE BACK FOR DETAILED FLAGGED ROWS
# ------------------------------------------------------
flagged_details = summary.merge(
    flagged[["FileDate", "Benchmark"]],
    on=["FileDate", "Benchmark"],
    how="inner"
)

# ------------------------------------------------------
# 💾 SAVE OUTPUTS (UPLOAD STREAMS)
# ------------------------------------------------------
if use_dataiku:
    # Save summary output
    flagged_csv = flagged.to_csv(index=False)
    with output_folder.upload_stream("flagged_summary.csv") as stream:
        stream.write(flagged_csv.encode("utf-8"))

    # Save detailed flagged data
    flagged_details_csv = flagged_details.to_csv(index=False)
    with output_folder.upload_stream("flagged_details.csv") as stream:
        stream.write(flagged_details_csv.encode("utf-8"))
else:
    flagged.to_csv(os.path.join(output_path, "flagged_summary.csv"), index=False)
    flagged_details.to_csv(os.path.join(output_path, "flagged_details.csv"), index=False)

# ------------------------------------------------------
# ✅ COMPLETION MESSAGE
# ------------------------------------------------------
print("✅ Flagging completed successfully!")
print(f"Total (FileDate, Benchmark) flagged: {len(flagged)}")

if not flagged.empty:
    print(flagged[["FileDate", "Benchmark", "Missing_Statuses"]])
else:
    print("🎉 All combinations have all four statuses!")
