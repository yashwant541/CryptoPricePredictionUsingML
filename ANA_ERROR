import pandas as pd
import os
import io
import dataiku

# ------------------------------------------------------
# ‚öôÔ∏è CONFIGURATION
# ------------------------------------------------------
use_dataiku = True  # üîÑ Switch between Dataiku and local

if use_dataiku:
    input_folder = dataiku.Folder("XXXXXXX")       # Input CSV files
    output_folder = dataiku.Folder("XXXXXXX")      # Output folder (with Match_Flag + Mismatch_Reason)
else:
    input_folder_path = r"C:\path\to\input"
    output_folder_path = r"C:\path\to\output"

# ------------------------------------------------------
# üß© Helper function
# ------------------------------------------------------
def process_file(file_path, file_name):
    df = pd.read_csv(file_path)

    # --- Define column pair mappings ---
    mappings = [
        ("AB1", "C1"),
        ("AB1 Category", "C1 Category"),
        ("AB2", "C2"),
        ("AB2 Category", "C2 Category"),
        ("AB3", "C3"),
        ("AB3 Category", "C3 Category"),
        ("AB4", "C4"),
        ("AB4 Category", "C4 Category"),
    ]

    # --- Function to check matches and collect mismatch reasons ---
    def check_match(row):
        mismatches = []
        for col_a, col_b in mappings:
            if col_a in df.columns and col_b in df.columns:
                val_a = str(row[col_a]).strip().lower() if not pd.isna(row[col_a]) else ""
                val_b = str(row[col_b]).strip().lower() if not pd.isna(row[col_b]) else ""
                if val_a != val_b:
                    mismatches.append(f"{col_a} vs {col_b}")
        if mismatches:
            return False, ", ".join(mismatches)
        else:
            return True, ""

    # --- Apply logic to each row ---
    results = df.apply(lambda r: check_match(r), axis=1)
    df["Match_Flag"] = [res[0] for res in results]
    df["Mismatch_Reason"] = [res[1] for res in results]

    # --- Save output file ---
    output_file_name = os.path.splitext(file_name)[0] + "_matchflag_reason.csv"

    if use_dataiku:
        buffer = io.StringIO()
        df.to_csv(buffer, index=False)
        output_folder.upload_stream(output_file_name, io.BytesIO(buffer.getvalue().encode("utf-8")))
    else:
        os.makedirs(output_folder_path, exist_ok=True)
        df.to_csv(os.path.join(output_folder_path, output_file_name), index=False)

    print(f"‚úÖ {file_name}: Processed {len(df)} rows (Match_Flag + Mismatch_Reason added).")


# ------------------------------------------------------
# üöÄ Main Execution
# ------------------------------------------------------
if use_dataiku:
    for path in input_folder.list_paths_in_partition():
        if path.endswith(".csv"):
            file_name = os.path.basename(path)
            with input_folder.get_download_stream(path) as f:
                df = pd.read_csv(f)
                temp_path = f"/tmp/{file_name}"
                df.to_csv(temp_path, index=False)
                process_file(temp_path, file_name)
else:
    for filename in os.listdir(input_folder_path):
        if filename.endswith(".csv"):
            process_file(os.path.join(input_folder_path, filename), filename)
