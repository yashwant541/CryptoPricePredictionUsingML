def read_excel_tab(filepath):
    """Read 'COMPUTED DATA' sheet (Origami Table) with multi-row header from row 2"""
    wb = load_workbook(filepath, data_only=True)
    sheet_name = None

    # Find target sheet
    for name in wb.sheetnames:
        if re.search(SHEET_NAME_PATTERN, name, re.IGNORECASE):
            sheet_name = name
            break

    if not sheet_name:
        log("⚠️ 'COMPUTED DATA' sheet not found in workbook.")
        return None, None

    ws = wb[sheet_name]
    all_rows = list(ws.iter_rows(values_only=True))
    all_rows = [list(r) for r in all_rows if any(r)]  # remove empty rows

    if len(all_rows) < 3:
        log("⚠️ Not enough rows to form Origami table.")
        return None, None

    # ---- Identify the start of the table (row 2 in Excel = index 1 here)
    header_row_1 = [str(x).strip() if x else "" for x in all_rows[1]]  # Row 2
    header_row_2 = [str(x).strip() if x else "" for x in all_rows[2]]  # Row 3

    # ---- Flatten the two header rows
    combined_headers = []
    for h1, h2 in zip(header_row_1, header_row_2):
        if h1 and h2:
            combined_headers.append(f"{h1}_{h2}")
        elif h1:
            combined_headers.append(h1)
        elif h2:
            combined_headers.append(h2)
        else:
            combined_headers.append("")

    # ---- Find where the summary (maker-checker) section begins
    start_idx = 3  # data starts after two header rows
    end_idx = len(all_rows)
    for i, row in enumerate(all_rows[start_idx:], start=start_idx):
        text = " ".join([str(c) for c in row if c]).strip()
        if any(x in text for x in ["USER:", "Benchmark:", "Status", "Date:"]):
            end_idx = i
            break

    table_rows = all_rows[start_idx:end_idx]
    summary_rows = all_rows[end_idx:]

    if not table_rows:
        log("⚠️ No Origami data rows found.")
        return None, None

    # ---- Build DataFrame
    df_table = pd.DataFrame(table_rows, columns=combined_headers)

    # ---- Parse metadata summary
    summary_texts = [" ".join([str(c) for c in row if c]).strip() for row in summary_rows if any(row)]
    metadata = []
    current = {}

    for line in summary_texts:
        line = line.strip()

        if re.search(r'\bUSER\b', line):
            if current:
                metadata.append(current)
                current = {}
            match = re.search(r'USER[:\s]*(.*)', line)
            current["USER"] = match.group(1).strip() if match else ""

        elif re.search(r'\bBenchmark\b', line):
            match = re.search(r'Benchmark[:\s]*(.*)', line)
            current["Benchmark"] = match.group(1).strip() if match else ""

        elif re.search(r'\bDate\b', line):
            match = re.search(r'Date[:\s]*(.*)', line)
            current["Date (in file)"] = match.group(1).strip() if match else ""

        elif re.search(r'\bStatus\b', line) and "Status Time" not in line:
            match = re.search(r'Status[:\s]*(.*)', line)
            current["Status"] = match.group(1).strip() if match else ""

        elif re.search(r'\bStatus Time\b', line):
            match = re.search(r'Status Time[:\s]*(.*)', line)
            current["Status Time"] = match.group(1).strip() if match else ""

    if current:
        metadata.append(current)

    return df_table, metadata
