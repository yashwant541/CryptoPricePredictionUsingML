import pandas as pd
import os
import io
import dataiku

# ------------------------------------------------------
# ‚öôÔ∏è CONFIGURATION
# ------------------------------------------------------
use_dataiku = True  # üîÑ Switch between Dataiku and local

if use_dataiku:
    input_folder = dataiku.Folder("XXXXXXXX")   # Input: Match folder (CSV files)
    output_folder = dataiku.Folder("XXXXXXXX")  # Output: Final transformed files
else:
    input_folder_path = r"C:\path\to\match"
    output_folder_path = r"C:\path\to\final"

# ------------------------------------------------------
# üß≠ COLUMN MAPPINGS
# ------------------------------------------------------
column_mapping = {
    "C1": "AAA",
    "C1 Category": "AAA Category",
    "C2": "AA+",
    "C2 Category": "AA+ Category",
    "C3": "AA",
    "C3 Category": "AA Category",
    "C4": "AA-",
    "C4 Category": "AA- Category"
}

# ------------------------------------------------------
# ‚öôÔ∏è PROCESSING FUNCTION
# ------------------------------------------------------
def process_file(file_path, file_name):
    # Read input CSV
    df = pd.read_csv(file_path)

    # Keep only Tenor/Rating column(s) and C columns
    c_columns = [col for col in df.columns if col.startswith("C") or "tenor" in col.lower() or "rating" in col.lower()]

    if not c_columns:
        print(f"‚ö†Ô∏è Skipping {file_name}: No C or Tenor/Rating columns found.")
        return

    # Filter and rename
    filtered_df = df[c_columns].copy()
    rename_map = {col: column_mapping[col] for col in filtered_df.columns if col in column_mapping}
    filtered_df.rename(columns=rename_map, inplace=True)

    # Save transformed output
    if use_dataiku:
        buffer = io.StringIO()
        filtered_df.to_csv(buffer, index=False)
        output_folder.upload_stream(file_name, io.BytesIO(buffer.getvalue().encode("utf-8")))
    else:
        os.makedirs(output_folder_path, exist_ok=True)
        filtered_df.to_csv(os.path.join(output_folder_path, file_name), index=False)

    print(f"‚úÖ Processed: {file_name} ({len(filtered_df)} rows, {len(filtered_df.columns)} columns)")

# ------------------------------------------------------
# üöÄ MAIN EXECUTION
# ------------------------------------------------------
if use_dataiku:
    for path in input_folder.list_paths_in_partition():
        if path.endswith(".csv"):
            file_name = os.path.basename(path)
            with input_folder.get_download_stream(path) as f:
                df = pd.read_csv(f)
                temp_path = f"/tmp/{file_name}"
                df.to_csv(temp_path, index=False)
                process_file(temp_path, file_name)
else:
    for filename in os.listdir(input_folder_path):
        if filename.endswith(".csv"):
            process_file(os.path.join(input_folder_path, filename), filename)
