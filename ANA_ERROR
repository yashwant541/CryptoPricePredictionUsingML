import re
import csv
from typing import List, Tuple
import PyPDF2
import os

def extract_text_after_keywords(pdf_path: str, keywords: List[str]) -> List[Tuple[str, str]]:
    """
    Extract text immediately following keyword matches in a PDF.
    
    Args:
        pdf_path: Path to the PDF file
        keywords: List of keywords to search for
        
    Returns:
        List of tuples containing (keyword, text_after_keyword)
    """
    results = []
    
    # Open the PDF file
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        
        # Process each page
        for page in reader.pages:
            text = page.extract_text()
            if not text:
                continue
                
            # Search for each keyword
            for keyword in keywords:
                # Create a regex pattern that matches the keyword followed by optional whitespace
                pattern = re.compile(re.escape(keyword) + r'\s*(.*?)(?=\n|$|' + re.escape(keyword) + ')', 
                                    re.IGNORECASE | re.DOTALL)
                
                # Find all matches
                matches = pattern.findall(text)
                for match in matches:
                    # Clean up the matched text (remove leading/trailing whitespace)
                    text_after = match.strip()
                    if text_after:  # Only add if there's actually text after the keyword
                        results.append((keyword, text_after))
    
    return results

def save_to_csv(results: List[Tuple[str, str]], output_path: str):
    """
    Save the extraction results to a CSV file.
    
    Args:
        results: List of tuples from extract_text_after_keywords
        output_path: Path to save the CSV file
    """
    with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Keyword', 'Text After Keyword'])
        writer.writerows(results)

def get_user_input(prompt: str, is_file: bool = False) -> str:
    """
    Get input from user with validation.
    
    Args:
        prompt: The prompt to display
        is_file: Whether to validate the input as a file path
        
    Returns:
        Validated user input
    """
    while True:
        user_input = input(prompt).strip()
        if not user_input:
            print("Error: Input cannot be empty. Please try again.")
            continue
        if is_file and not os.path.isfile(user_input):
            print(f"Error: File '{user_input}' not found. Please try again.")
            continue
        return user_input

if __name__ == '__main__':
    print("PDF Text Extractor Tool")
    print("-----------------------\n")
    
    # Get input PDF file path from user
    pdf_path = get_user_input("Enter the path to your PDF file: ", is_file=True)
    
    # Get keywords from user
    print("\nEnter the keywords to search for (one per line, press Enter twice when done):")
    keywords = []
    while True:
        keyword = input("> ").strip()
        if not keyword:
            if not keywords:
                print("Please enter at least one keyword.")
                continue
            else:
                break
        keywords.append(keyword)
    
    # Set default output path (same directory as input with .csv extension)
    default_output = os.path.splitext(pdf_path)[0] + "_extracted.csv"
    output_csv = input(f"\nEnter output CSV path (press Enter for default '{default_output}'): ").strip()
    output_csv = output_csv if output_csv else default_output
    
    # Extract the data
    print("\nProcessing...")
    extracted_data = extract_text_after_keywords(pdf_path, keywords)
    
    # Save to CSV
    save_to_csv(extracted_data, output_csv)
    
    print(f"\nSuccessfully extracted {len(extracted_data)} matches to '{output_csv}'")
