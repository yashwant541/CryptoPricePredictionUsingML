import pandas as pd
import dataiku
import os
import io

# ------------------------------------------------------
# ⚙️ CONFIGURATION (EDIT ONLY THIS SECTION)
# ------------------------------------------------------

input_folder = dataiku.Folder("INPUT_FOLDER_ID")      # 🔄 Replace with your input folder ID
output_folder = dataiku.Folder("OUTPUT_FOLDER_ID")    # 🔄 Replace with your output folder ID

label_column = "Label"                                # 🔄 Column to split
split_lengths = [2, 3, 2, 4]                          # 🔄 Lengths for each part
col_names = ["Part1", "Part2", "Part3", "Remaining"]  # 🔄 Column names for new parts

# ------------------------------------------------------
# 🧠 FUNCTION DEFINITION
# ------------------------------------------------------

def split_label(label):
    """Removes '=' and splits from left based on configured split_lengths."""
    clean_label = str(label).replace("=", "")
    parts, start = [], 0
    for i, length in enumerate(split_lengths):
        if i < len(split_lengths) - 1:
            parts.append(clean_label[start:start + length])
            start += length
        else:
            parts.append(clean_label[start:])  # Remaining text
    
    # Pad missing parts (if label is too short)
    while len(parts) < len(col_names):
        parts.append("")
    
    return dict(zip(col_names, parts))

# ------------------------------------------------------
# 📂 READ ALL FILES FROM INPUT FOLDER
# ------------------------------------------------------

file_list = input_folder.list_paths_in_partition()
print(f"Found {len(file_list)} files to process.")

for path in file_list:
    filename = os.path.basename(path)
    print(f"Processing file: {filename}")

    # Read file
    with input_folder.get_download_stream(filename) as f:
        if filename.lower().endswith(".csv"):
            df = pd.read_csv(f)
        elif filename.lower().endswith((".xls", ".xlsx")):
            df = pd.read_excel(f)
        else:
            print(f"⚠️ Skipping unsupported file type: {filename}")
            continue

    # ------------------------------------------------------
    # 🧩 APPLY LABEL SPLITTING LOGIC
    # ------------------------------------------------------
    if label_column not in df.columns:
        print(f"⚠️ Column '{label_column}' not found in {filename}. Skipping.")
        continue

    split_df = df[label_column].apply(lambda x: pd.Series(split_label(x)))
    final_df = pd.concat([df, split_df], axis=1)

    # ------------------------------------------------------
    # 💾 SAVE TO OUTPUT FOLDER (same filename)
    # ------------------------------------------------------
    temp_path = os.path.join("/tmp", filename)
    if filename.lower().endswith(".csv"):
        final_df.to_csv(temp_path, index=False, encoding="utf-8-sig")
    else:
        final_df.to_excel(temp_path, index=False)

    with open(temp_path, "rb") as f:
        output_folder.upload_stream(filename, f)

    print(f"✅ Saved processed file: {filename}")

print("🎯 All files processed successfully.")
