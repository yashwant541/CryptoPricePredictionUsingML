import pandas as pd
import os
import io
import re
import dataiku

# ------------------------------------------------------
# ‚öôÔ∏è CONFIGURATION
# ------------------------------------------------------
use_dataiku = True  # üîÑ Switch between Dataiku and local

if use_dataiku:
    input_folder = dataiku.Folder("XXXXXXX")   # Input folder containing match CSV files
    output_folder = dataiku.Folder("XXXXXXX")  # Output folder for reshaped files
else:
    input_folder_path = r"C:\path\to\matched_clean"
    output_folder_path = r"C:\path\to\long_output"

# ------------------------------------------------------
# üß© Helper Function: Extract date between 3rd and 4th "_"
# ------------------------------------------------------
def extract_date_from_filename(filename):
    """
    Extracts the date between the 3rd and 4th underscore ("_") in the filename.
    Expected format: 01-Aug-25 or similar.
    Returns the date string if found, else empty string.
    """
    parts = filename.split("_")
    if len(parts) >= 4:
        date_part = parts[3].split(".")[0]  # remove file extension if attached
        # Validate it looks like a date (01-Aug-25 format)
        if re.match(r"\d{1,2}-[A-Za-z]{3}-\d{2,4}", date_part):
            return date_part
    return ""

# ------------------------------------------------------
# üß† FUNCTION TO PROCESS FILE
# ------------------------------------------------------
def process_file(file_path, file_name):
    df = pd.read_csv(file_path)

    # Normalize Tenor column
    if "Tenor/Rating" in df.columns and "Tenor" not in df.columns:
        df.rename(columns={"Tenor/Rating": "Tenor"}, inplace=True)

    tenor_col = "Tenor"

    # Define rate columns and their corresponding category columns
    rate_category_pairs = [
        ("ATM Ask", "ATM Ask Category"),
        ("ATM Bid", "ATM Bid Category"),
        ("25d RR Mid", "25d RR Mid Category"),
        ("25d BF Mid", "25d BF Mid Category")
    ]

    # Build long dataframe manually to preserve matching category
    long_frames = []
    for rate_col, cat_col in rate_category_pairs:
        if rate_col in df.columns:
            temp = df[[tenor_col, rate_col]].copy()
            temp.rename(columns={rate_col: "Rate"}, inplace=True)
            temp["Type"] = rate_col

            # Get category column value if available
            if cat_col in df.columns:
                temp["Category"] = df[cat_col]
            else:
                temp["Category"] = None  # default if missing

            long_frames.append(temp)

    # Combine all
    if not long_frames:
        print(f"‚ö†Ô∏è Skipping {file_name}: No valid rate columns found.")
        return

    long_df = pd.concat(long_frames, ignore_index=True)

    # Add file date
    long_df["FileDate"] = extract_date_from_filename(file_name)

    # Reorder columns
    long_df = long_df[["Tenor", "Type", "Rate", "Category", "FileDate"]]

    # Output file name
    output_file_name = os.path.splitext(file_name)[0] + "_long.csv"

    # Save
    if use_dataiku:
        buffer = io.StringIO()
        long_df.to_csv(buffer, index=False)
        output_folder.upload_stream(output_file_name, io.BytesIO(buffer.getvalue().encode("utf-8")))
    else:
        os.makedirs(output_folder_path, exist_ok=True)
        long_df.to_csv(os.path.join(output_folder_path, output_file_name), index=False)

    print(f"‚úÖ {file_name}: {len(long_df)} rows processed (Date: {long_df['FileDate'].iloc[0] if not long_df.empty else 'N/A'})")

# ------------------------------------------------------
# üöÄ MAIN EXECUTION
# ------------------------------------------------------
if use_dataiku:
    for path in input_folder.list_paths_in_partition():
        if path.endswith(".csv"):
            file_name = os.path.basename(path)
            with input_folder.get_download_stream(path) as f:
                df = pd.read_csv(f)
                temp_path = f"/tmp/{file_name}"
                df.to_csv(temp_path, index=False)
                process_file(temp_path, file_name)
else:
    for filename in os.listdir(input_folder_path):
        if filename.endswith(".csv"):
            process_file(os.path.join(input_folder_path, filename), filename)
