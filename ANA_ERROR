import dataiku
import extract_msg
import pandas as pd
import re
import io

# -----------------------------
# Configuration
# -----------------------------
# Replace these with your actual Dataiku folder names
input_folder_name = "INPUT_FOLDER"
output_folder_name = "OUTPUT_FOLDER"

# Get Dataiku folder objects
input_folder = dataiku.Folder(input_folder_name)
output_folder = dataiku.Folder(output_folder_name)

# Function to extract date from filename
def extract_date_from_filename(filename):
    # Looks for patterns like 23-Sep-2024 or 2-Jul-2024
    date_pattern = r'\d{1,2}[-/][A-Za-z]{3}[-/]\d{2,4}'
    match = re.search(date_pattern, filename)
    if match:
        return match.group(0)
    else:
        return os.path.splitext(filename)[0]

# Function to extract table from email body
def extract_table_from_body(body_text):
    lines = body_text.splitlines()
    lines = [line for line in lines if line.strip()]
    
    # Try comma-separated
    try:
        df = pd.DataFrame([line.split(',') for line in lines[1:]], columns=lines[0].split(','))
        return df
    except:
        pass

    # Try tab-separated
    try:
        df = pd.DataFrame([line.split('\t') for line in lines[1:]], columns=lines[0].split('\t'))
        return df
    except:
        pass
    
    # fallback: whitespace separated
    df = pd.DataFrame([re.split(r'\s+', line) for line in lines[1:]], columns=re.split(r'\s+', lines[0]))
    return df

# -----------------------------
# Processing MSG files in Dataiku folder
# -----------------------------
for file_info in input_folder.list_paths_in_partition():
    if file_info.lower().endswith('.msg'):
        # Read MSG file into memory
        with input_folder.get_download_stream(file_info) as f:
            msg_data = f.read()
        
        # Save to a temporary buffer to read with extract_msg
        with io.BytesIO(msg_data) as msg_buffer:
            msg = extract_msg.Message(msg_buffer)
            msg_body = msg.body

            # Extract table from body
            try:
                table_df = extract_table_from_body(msg_body)
            except Exception as e:
                print(f"Error extracting table from {file_info}: {e}")
                continue

            # Extract date from filename
            date_str = extract_date_from_filename(file_info)
            output_file_name = f"{date_str}_table.csv"

            # Save CSV to output folder
            with output_folder.get_writer(output_file_name) as writer:
                table_df.to_csv(writer, index=False)
            
            print(f"Saved table from {file_info} as {output_file_name}")
