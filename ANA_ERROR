import re
import pandas as pd
from extract_msg import Message
import io
import os
import dataiku
from datetime import datetime

# -------------------------------
# ðŸ“‚ Dataiku folders
# -------------------------------
INPUT_FOLDER_NAME = "msg_input_folder"     # Replace with your input folder name
OUTPUT_FOLDER_NAME = "table_output_folder" # Replace with your output folder name

input_folder = dataiku.Folder(INPUT_FOLDER_NAME)
output_folder = dataiku.Folder(OUTPUT_FOLDER_NAME)

# -------------------------------
# ðŸ”§ Helper functions
# -------------------------------

def extract_date_from_filename(filename):
    """
    Extract date from filename (handles formats like 04-Apr-2025, 16th June 2025, 2nd July 2024)
    """
    import dateparser
    name_without_ext = os.path.splitext(filename)[0]
    date = dateparser.parse(name_without_ext, settings={'DATE_ORDER': 'DMY'})
    if date:
        return date.strftime('%Y-%m-%d')
    return "unknown_date"

def extract_table_from_html(html_content):
    try:
        tables = pd.read_html(html_content)
        if tables:
            return tables[0]
    except Exception as e:
        print(f"Error extracting table from HTML: {e}")
    return None

def extract_table_from_text(text_content):
    lines = text_content.split('\n')
    table_data = []

    for line in lines:
        line = line.strip()
        if not line:
            continue
        # Tab, comma, or space-separated
        if '\t' in line:
            row = [c.strip() for c in line.split('\t') if c.strip()]
        elif ',' in line and len(line.split(',')) > 1:
            row = [c.strip() for c in line.split(',') if c.strip()]
        else:
            row = [c.strip() for c in re.split(r'\s{2,}', line) if c.strip()]
        if len(row) > 1:
            table_data.append(row)

    if len(table_data) > 1:
        try:
            df = pd.DataFrame(table_data[1:], columns=table_data[0])
            return df
        except Exception as e:
            print(f"Error creating DataFrame from text: {e}")
    return None

def process_msg_file(msg_bytes, filename):
    """
    Process a single MSG file from bytes and extract table
    """
    try:
        msg = Message(io.BytesIO(msg_bytes))
        date_str = extract_date_from_filename(filename)

        # Extract table from HTML first
        table_df = None
        if msg.htmlBody:
            table_df = extract_table_from_html(msg.htmlBody)

        # If no table, try plain text
        if table_df is None and msg.body:
            table_df = extract_table_from_text(msg.body)

        # Save table to Dataiku output folder
        if table_df is not None:
            output_name = f"{date_str}_table.csv"
            with output_folder.get_writer(output_name) as writer:
                table_df.to_csv(writer, index=False)
            print(f"âœ“ Table saved: {output_name} | Shape: {table_df.shape}")
            return True
        else:
            print(f"âœ— No table found in: {filename}")
            return False

    except Exception as e:
        print(f"Error processing {filename}: {e}")
        return False

# -------------------------------
# ðŸ”„ Process all MSG files
# -------------------------------
def process_all_msg_files():
    # List all files in input folder
    all_files = input_folder.list_paths_in_partition()
    if not all_files:
        print("No files found in input folder.")
        return

    # Detect MSG files (handles uppercase, whitespace)
    msg_files = [f.strip() for f in all_files if f.strip().lower().endswith('.msg')]

    if not msg_files:
        print("No MSG files found in the input folder.")
        print("Files present:", all_files)
        return

    print(f"Found {len(msg_files)} MSG files: {msg_files}")
    successful = 0

    for i, path in enumerate(msg_files, 1):
        print(f"\n[{i}/{len(msg_files)}] Processing {path} ...")
        msg_bytes = input_folder.get_download_stream(path).read()
        if process_msg_file(msg_bytes, path):
            successful += 1

    print("\n" + "="*50)
    print(f"Processing complete! Successfully extracted tables from {successful}/{len(msg_files)} files")

# -------------------------------
# ðŸš€ Run script
# -------------------------------
if __name__ == "__main__":
    process_all_msg_files()
