def read_excel_tab(filepath):
    """Read Origami 'COMPUTED DATA' sheet (multi-row header starting around row 2)"""
    wb = load_workbook(filepath, data_only=True)
    sheet_name = None

    # Find relevant sheet
    for name in wb.sheetnames:
        if re.search(SHEET_NAME_PATTERN, name, re.IGNORECASE):
            sheet_name = name
            break

    if not sheet_name:
        log("‚ö†Ô∏è 'COMPUTED DATA' sheet not found in workbook.")
        return None, None

    ws = wb[sheet_name]
    all_rows = list(ws.iter_rows(values_only=True))
    all_rows = [list(r) for r in all_rows if any(r)]  # remove completely empty rows

    if len(all_rows) < 3:
        log("‚ö†Ô∏è Not enough rows to form Origami table.")
        return None, None

    # -------------------------------------------------------
    # üîç Auto-detect start of table by finding 'Category' row
    # -------------------------------------------------------
    start_row_idx = None
    for i, row in enumerate(all_rows):
        row_str = " ".join([str(c) for c in row if c]).strip().lower()
        if "category" in row_str and "tenor" in row_str:
            start_row_idx = i
            break

    if start_row_idx is None:
        log("‚ö†Ô∏è Could not find table header (Category/Tenor).")
        return None, None

    # -------------------------------------------------------
    # Build header rows (two levels)
    # -------------------------------------------------------
    if start_row_idx + 1 >= len(all_rows):
        log("‚ö†Ô∏è Incomplete header rows.")
        return None, None

    header_row_1 = [str(x).strip() if x else "" for x in all_rows[start_row_idx]]
    header_row_2 = [str(x).strip() if x else "" for x in all_rows[start_row_idx + 1]]

    # -------------------------------------------------------
    # üßπ Clean + Combine headers like 'DF-1 AAA'
    # -------------------------------------------------------
    combined_headers = []
    for h1, h2 in zip(header_row_1, header_row_2):
        clean_h1 = re.sub(r'\s+', ' ', re.sub(r'[\(\)]', '', h1)).strip()
        clean_h2 = re.sub(r'\s+', ' ', re.sub(r'[\(\)]', '', h2)).strip()

        if clean_h1 and clean_h2:
            combined_headers.append(f"{clean_h1} {clean_h2}".strip())
        elif clean_h1:
            combined_headers.append(clean_h1)
        elif clean_h2:
            combined_headers.append(clean_h2)
        else:
            combined_headers.append("")

    # -------------------------------------------------------
    # Identify data rows (stop when 'USER:' or 'Benchmark:' appears)
    # -------------------------------------------------------
    start_idx = start_row_idx + 2  # after the two header rows
    end_idx = len(all_rows)
    for i, row in enumerate(all_rows[start_idx:], start=start_idx):
        text = " ".join([str(c) for c in row if c]).strip()
        if any(x in text for x in ["USER:", "Benchmark:", "Status", "Date:"]):
            end_idx = i
            break

    table_rows = all_rows[start_idx:end_idx]
    summary_rows = all_rows[end_idx:]

    if not table_rows:
        log("‚ö†Ô∏è No Origami data rows found.")
        return None, None

    # -------------------------------------------------------
    # Create main DataFrame
    # -------------------------------------------------------
    df_table = pd.DataFrame(table_rows, columns=combined_headers)

    # -------------------------------------------------------
    # Parse summary section (maker-checker metadata)
    # -------------------------------------------------------
    summary_texts = [" ".join([str(c) for c in row if c]).strip() for row in summary_rows if any(row)]
    metadata = []
    current = {}

    for line in summary_texts:
        line = line.strip()

        if re.search(r'\bUSER\b', line):
            if current:
                metadata.append(current)
                current = {}
            match = re.search(r'USER[:\s]*(.*)', line)
            current["USER"] = match.group(1).strip() if match else ""

        elif re.search(r'\bBenchmark\b', line):
            match = re.search(r'Benchmark[:\s]*(.*)', line)
            current["Benchmark"] = match.group(1).strip() if match else ""

        elif re.search(r'\bDate\b', line):
            match = re.search(r'Date[:\s]*(.*)', line)
            current["Date (in file)"] = match.group(1).strip() if match else ""

        elif re.search(r'\bStatus\b', line) and "Status Time" not in line:
            match = re.search(r'Status[:\s]*(.*)', line)
            current["Status"] = match.group(1).strip() if match else ""

        elif re.search(r'\bStatus Time\b', line):
            match = re.search(r'Status Time[:\s]*(.*)', line)
            current["Status Time"] = match.group(1).strip() if match else ""

    if current:
        metadata.append(current)

    return df_table, metadata
