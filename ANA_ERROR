from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak
import pandas as pd
from reportlab.lib.units import inch

# File Paths
input_file = 'input_data.csv'  # Change this to your file path
pdf_file = 'dynamic_report.pdf'
image_file = 'front_page_image.png'  # Path to your PNG file for the front page

# Read the file (supports both CSV and Excel)
if input_file.endswith('.csv'):
    df = pd.read_csv(input_file)
elif input_file.endswith('.xlsx'):
    df = pd.read_excel(input_file)

# Create PDF report with landscape orientation
doc = SimpleDocTemplate(pdf_file, pagesize=(A4[1], A4[0]))  # A4 landscape
story = []

# Add front page image (first page)
try:
    img = Image(image_file)
    # Resize image to fit within the page (example: fit within 6x6 inches)
    img.drawWidth = 6 * inch  # Resize width (in inches)
    img.drawHeight = 6 * inch  # Resize height (in inches)
    story.append(img)
    story.append(Spacer(1, 12))  # Add some space after the image
except Exception as e:
    print(f"Error loading image: {e}")

# Add content from the second page onward (your report)
styles = getSampleStyleSheet()

# Section style for report text
section_style = ParagraphStyle(
    'SectionStyle',
    fontName='Helvetica',
    fontSize=12,
    textColor=colors.HexColor("#38D200"),  # Green text color for fields
)

# Add report data from the DataFrame to the PDF
for idx, row in df.iterrows():
    title_text = row[df.columns[0]] if len(df.columns) > 0 else "No Title"
    title_paragraph = Paragraph(f"Record {idx + 1}: {title_text}", style=styles['Heading2'])
    story.append(title_paragraph)
    story.append(Spacer(1, 12))

    # Add data for each column dynamically
    for col in df.columns:
        if pd.notna(row[col]):
            story.append(Paragraph(f"<b>{col}:</b> {row[col]}", section_style))
            story.append(Spacer(1, 6))

    # Add page break after each record (if necessary)
    if (idx + 1) % 10 == 0:
        story.append(PageBreak())

# Build PDF with the collected story content
try:
    doc.build(story)
    print(f"Dynamic PDF report created successfully: {pdf_file}")
except Exception as e:
    print(f"Error creating PDF: {e}")
