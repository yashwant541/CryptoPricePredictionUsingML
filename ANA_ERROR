import dataiku
import tempfile
import os
from msg_parser import MsOxMessage

# ------------------------------------------------------
# üîß Configuration ‚Äî Replace with your Dataiku folder IDs
# ------------------------------------------------------
input_folder = dataiku.Folder("YOUR_INPUT_FOLDER_ID")
output_folder = dataiku.Folder("YOUR_OUTPUT_FOLDER_ID")

TABULAR_EXTENSIONS = ('.xls', '.xlsx', '.xlsm', '.xlsb', '.csv', '.txt')

# ------------------------------------------------------
# üöÄ Main Execution
# ------------------------------------------------------
def main():
    input_files = input_folder.list_paths_in_partition()
    if not input_files:
        raise FileNotFoundError("‚ùå No .msg files found in input folder!")

    for msg_file_info in input_files:
        file_name = os.path.basename(msg_file_info)

        # Download .msg file
        with input_folder.get_download_stream(msg_file_info) as stream:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".msg") as tmp_msg:
                tmp_msg.write(stream.read())
                tmp_msg_path = tmp_msg.name

        # Parse .msg file safely
        msg = MsOxMessage(tmp_msg_path)

        for i, attach in enumerate(msg.attachments, start=1):
            # Use filename if available, otherwise generate one
            attach_name = getattr(attach, "filename", f"attachment_{i}")
            attach_bytes = getattr(attach, "payload", None)

            if not attach_bytes:
                print(f"‚è© Skipping attachment {attach_name} (no payload)")
                continue

            if attach_name.lower().endswith(TABULAR_EXTENSIONS):
                # Save temporary file
                with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                    tmp_file.write(attach_bytes)
                    tmp_file_path = tmp_file.name

                # Upload to Dataiku output folder
                output_file_name = f"{os.path.splitext(file_name)[0]}_{attach_name}"
                with open(tmp_file_path, "rb") as f:
                    output_folder.upload_stream(output_file_name, f)

                os.remove(tmp_file_path)
                print(f"‚úÖ Saved attachment: {output_file_name}")
            else:
                print(f"‚è© Skipping non-tabular attachment: {attach_name}")

        os.remove(tmp_msg_path)
        print(f"‚úÖ Processed .msg file: {file_name}")

if __name__ == "__main__":
    main()
