let currentFileData = null;
let currentFileName = null;

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    updateStepProgress(1);

    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');

    uploadArea.addEventListener('click', () => { fileInput.click(); });
    uploadArea.addEventListener('dragover', (e) => { e.preventDefault(); uploadArea.classList.add('dragover'); });
    uploadArea.addEventListener('dragleave', () => { uploadArea.classList.remove('dragover'); });
    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault(); uploadArea.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) handleFileSelect(files[0]);
    });

    fileInput.addEventListener('change', (e) => { if (e.target.files.length > 0) handleFileSelect(e.target.files[0]); });
}

function handleFileSelect(file) {
    if (file.type !== 'text/plain' && !file.name.toLowerCase().endsWith('.txt')) {
        alert('Please upload a .txt file');
        return;
    }
    const reader = new FileReader();
    reader.onload = function(e) {
        currentFileData = e.target.result;
        currentFileName = file.name;
        previewUploadedFile();
    };
    reader.readAsDataURL(file);
}

function previewUploadedFile() {
    showLoading(true, "Previewing file...");
    updateStepProgress(2);

    // Use Dataiku's webapp_async_call instead of fetch
    if (typeof dataiku !== 'undefined' && dataiku.webapp_async_call) {
        dataiku.webapp_async_call(
            'do_parse_file',
            {
                file_data: currentFileData,
                file_name: currentFileName
            },
            function(data) {
                showLoading(false);
                if (data.error) {
                    alert("Error: " + data.error);
                } else {
                    document.getElementById('filePreview').style.display = 'block';
                    document.getElementById('previewContent').textContent = data.preview || "Preview not available";
                    updateStepProgress(3);
                    // Auto-process after preview
                    processAnalysis();
                }
            },
            function(error) {
                showLoading(false);
                alert("Preview failed: " + error);
            }
        );
    } else {
        // Fallback for testing
        showLoading(false);
        document.getElementById('filePreview').style.display = 'block';
        document.getElementById('previewContent').textContent = "File uploaded: " + currentFileName + "\n\nUsing Dataiku webapp API...";
        updateStepProgress(3);
        processAnalysis();
    }
}

function processAnalysis() {
    showLoading(true, "Analyzing email chain...");
    
    if (typeof dataiku !== 'undefined' && dataiku.webapp_async_call) {
        dataiku.webapp_async_call(
            'do_analyze_emails',
            {
                file_data: currentFileData,
                file_name: currentFileName
            },
            function(data) {
                showLoading(false);
                if (data.error) {
                    alert("Analysis error: " + data.error);
                } else {
                    displayResults(data.results);
                }
            },
            function(error) {
                showLoading(false);
                alert("Analysis failed: " + error);
            }
        );
    } else {
        // Fallback demo results
        showLoading(false);
        displayResults({
            final_maker: "John Smith",
            final_checker: "Jane Doe", 
            stats: {
                total_emails: 5,
                total_participants: 3
            }
        });
    }
}

function displayResults(results) {
    const resultsDiv = document.getElementById('resultsContent');
    resultsDiv.innerHTML = `
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
            <h3>Analysis Complete!</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #0d6efd;">
                    <h4>Maker (Requester)</h4>
                    <p style="font-size: 24px; font-weight: bold; color: #0d6efd; margin: 10px 0;">${results.final_maker || "Not identified"}</p>
                </div>
                <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #198754;">
                    <h4>Checker (Approver)</h4>
                    <p style="font-size: 24px; font-weight: bold; color: #198754; margin: 10px 0;">${results.final_checker || "Not identified"}</p>
                </div>
            </div>
            <div style="background: white; padding: 15px; border-radius: 6px;">
                <h4>Statistics</h4>
                <p>Total Emails: ${results.stats?.total_emails || 0}</p>
                <p>Total Participants: ${results.stats?.total_participants || 0}</p>
            </div>
        </div>
    `;
    document.getElementById('results').style.display = 'block';
}

function showLoading(show, text = "Loading...") {
    const loadingDiv = document.getElementById('loading');
    loadingDiv.style.display = show ? 'flex' : 'none';
    document.getElementById('loadingText').textContent = text;
}

function updateStepProgress(step) {
    const progress = document.getElementById('stepProgress');
    const steps = document.querySelectorAll('.step');
    
    // Update progress bar
    progress.style.width = `${((step - 1) / 2) * 100}%`;
    
    // Update step states
    steps.forEach((el, index) => {
        el.classList.remove('active', 'completed');
        if (index < step - 1) {
            el.classList.add('completed');
        }
        if (index === step - 1) {
            el.classList.add('active');
        }
    });
}
