let currentFileData = null;
let currentFileName = null;

updateStepProgress(1);

const uploadArea = document.getElementById('uploadArea');
const fileInput = document.getElementById('fileInput');

uploadArea.addEventListener('click', () => { fileInput.click(); });
uploadArea.addEventListener('dragover', (e) => { e.preventDefault(); uploadArea.classList.add('dragover'); });
uploadArea.addEventListener('dragleave', () => { uploadArea.classList.remove('dragover'); });
uploadArea.addEventListener('drop', (e) => {
    e.preventDefault(); uploadArea.classList.remove('dragover');
    const files = e.dataTransfer.files;
    if (files.length > 0) handleFileSelect(files[0]);
});

fileInput.addEventListener('change', (e) => { if (e.target.files.length > 0) handleFileSelect(e.target.files[0]); });

function handleFileSelect(file) {
    if (file.type !== 'text/plain' && !file.name.toLowerCase().endsWith('.txt')) {
        alert('Please upload a .txt file');
        return;
    }
    const reader = new FileReader();
    reader.onload = function(e) {
        currentFileData = e.target.result;
        currentFileName = file.name;
        previewUploadedFile();
    };
    reader.readAsDataURL(file);
}

function previewUploadedFile() {
    showLoading(true, "Previewing file...");
    updateStepProgress(1);

    // Example AJAX call to backend endpoint (Dataiku or other)
    fetch('do_parse_file', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({file_data: currentFileData, file_name: currentFileName})
    })
    .then(r => r.ok ? r.json() : Promise.reject('Network error'))
    .then(data => {
        showLoading(false);
        document.getElementById('filePreview').style.display = 'block';
        document.getElementById('previewContent').textContent = data.preview || "Preview not available";
        document.getElementById('results').style.display = 'block';
        document.getElementById('resultsContent').innerHTML = data.results || "No results yet";
        updateStepProgress(3);
    })
    .catch(err => { showLoading(false); alert("Error: " + err); });
}

function showLoading(show, text="Loading...") {
    const loadingDiv = document.getElementById('loading');
    loadingDiv.style.display = show ? 'flex' : 'none';
    document.getElementById('loadingText').textContent = text;
}

function updateStepProgress(step) {
    const progress = document.getElementById('stepProgress');
    progress.style.width = `${(step-1)/2*100}%`;

    document.querySelectorAll('.step').forEach((el, index) => {
        el.classList.remove('active', 'completed');
        if (index < step-1) el.classList.add('completed');
        if (index === step-1) el.classList.add('active');
    });
}
