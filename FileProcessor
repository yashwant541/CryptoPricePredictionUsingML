let currentFileData = null;
let currentFileName = null;

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    updateStepProgress(1);

    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');

    uploadArea.addEventListener('click', () => { fileInput.click(); });
    uploadArea.addEventListener('dragover', (e) => { e.preventDefault(); uploadArea.classList.add('dragover'); });
    uploadArea.addEventListener('dragleave', () => { uploadArea.classList.remove('dragover'); });
    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault(); 
        uploadArea.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) handleFileSelect(files[0]);
    });

    fileInput.addEventListener('change', (e) => { 
        if (e.target.files.length > 0) handleFileSelect(e.target.files[0]); 
    });
}

function handleFileSelect(file) {
    if (file.type !== 'text/plain' && !file.name.toLowerCase().endsWith('.txt')) {
        alert('Please upload a .txt file');
        return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
        currentFileData = e.target.result;  // plain text now
        currentFileName = file.name;
        processAnalysis(); // Directly call analysis
    };
    reader.readAsText(file); // FIXED: use readAsText
}

function processAnalysis() {
    showLoading(true, "Analyzing email chain...");
    updateStepProgress(2);

    console.log("Calling do_analyze_emails with file:", currentFileName);
    
    fetch('/your-webapp-prefix/do_analyze_emails', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            file_data: currentFileData,
            file_name: currentFileName
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok: ' + response.statusText);
        }
        return response.json();
    })
    .then(response => {
        showLoading(false);
        updateStepProgress(3);

        if (response && response.error) {
            alert("Analysis error: " + response.error);
        } else if (response && response.success) {
            displayResults(response.results);
        } else {
            alert("Unexpected response from analysis");
        }
    })
    .catch(error => {
        console.error("do_analyze_emails error:", error);
        showLoading(false);
        alert("Analysis failed: " + error.message);
    });
}

function displayResults(results) {
    const resultsDiv = document.getElementById('resultsContent');
    
    if (!results) {
        resultsDiv.innerHTML = `<div style="background: #f8d7da; padding: 20px; border-radius: 8px; color: #721c24;">
            <h3>No Results Available</h3>
            <p>The analysis did not return any results.</p>
        </div>`;
        document.getElementById('results').style.display = 'block';
        return;
    }
    
    let resultsHTML = `
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
            <h3 style="color: #198754; margin-bottom: 20px;">Analysis Complete!</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #0d6efd;">
                    <h4>Maker (Requester)</h4>
                    <p style="font-size: 24px; font-weight: bold; color: #0d6efd; margin: 10px 0;">${results.final_maker || "Not identified"}</p>
                </div>
                <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #198754;">
                    <h4>Checker (Approver)</h4>
                    <p style="font-size: 24px; font-weight: bold; color: #198754; margin: 10px 0;">${results.final_checker || "Not identified"}</p>
                </div>
            </div>
            
            <div style="background: white; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
                <h4>Statistics</h4>
                <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 10px; text-align: center;">
                    <div>
                        <strong style="font-size: 18px;">${results.stats?.total_emails || 0}</strong><br>
                        <small>Total Emails</small>
                    </div>
                    <div>
                        <strong style="font-size: 18px;">${results.stats?.total_participants || 0}</strong><br>
                        <small>Participants</small>
                    </div>
                    <div>
                        <strong style="font-size: 18px;">${results.stats?.potential_makers_count || 0}</strong><br>
                        <small>Potential Makers</small>
                    </div>
                    <div>
                        <strong style="font-size: 18px;">${results.stats?.potential_checkers_count || 0}</strong><br>
                        <small>Potential Checkers</small>
                    </div>
                </div>
            </div>
    `;

    if (results.resolution_method && results.resolution_method !== 'standard') {
        resultsHTML += `
            <div style="background: #d1ecf1; padding: 10px; border-radius: 4px; margin-bottom: 15px;">
                <strong>Resolution Method:</strong> ${results.resolution_method}
            </div>
        `;
    }

    resultsHTML += `</div>`;
    resultsDiv.innerHTML = resultsHTML;
    document.getElementById('results').style.display = 'block';
}

function showLoading(show, text = "Loading...") {
    const loadingDiv = document.getElementById('loading');
    loadingDiv.style.display = show ? 'flex' : 'none';
    document.getElementById('loadingText').textContent = text;
}

function updateStepProgress(step) {
    const progress = document.getElementById('stepProgress');
    const steps = document.querySelectorAll('.step');
    
    // Update progress bar
    progress.style.width = `${((step - 1) / 2) * 100}%`;
    
    // Update step states
    steps.forEach((el, index) => {
        el.classList.remove('active', 'completed');
        if (index < step - 1) el.classList.add('completed');
        if (index === step - 1) el.classList.add('active');
    });
}
