import streamlit as st
import os
import tempfile
import pandas as pd
from io import StringIO

# Your existing script imports and functions here
# (I'll include them all but collapse them for readability)

# Streamlit app
def main():
    st.set_page_config(page_title="Email Role Identifier", layout="wide")
    st.title("📧 Email Role Identification Tool")
    st.markdown("""
    This tool analyzes email threads to identify the most likely **requester** and **approver** 
    based on linguistic patterns and temporal positioning.
    """)
    
    # File upload section
    st.sidebar.header("Upload Email File")
    uploaded_file = st.sidebar.file_uploader(
        "Choose a text file containing email thread",
        type=["txt"]
    )
    
    if not uploaded_file:
        st.info("👈 Please upload an email text file to begin analysis")
        return
    
    # Process the file
    with st.spinner("Analyzing email thread..."):
        # Create a temporary file to work with
        with tempfile.NamedTemporaryFile(delete=False, suffix=".txt") as tmp:
            tmp.write(uploaded_file.getvalue())
            tmp_path = tmp.name
        
        try:
            # Parse the emails
            with open(tmp_path, "r", encoding="utf-8") as f:
                email_text = f.read()
            
            parsed_emails = parse_email_chain(email_text)
            
            if not parsed_emails:
                st.error("❌ No emails could be parsed from the input file.")
                return
            
            # Identify roles
            requester, approver, scores, first_sender = identify_requester_approver(parsed_emails)
            role_mapping = create_user_role_mapping(parsed_emails, requester, approver)
            
            # Display results
            st.success("Analysis complete!")
            
            # Results summary
            col1, col2, col3 = st.columns(3)
            col1.metric("First Sender", first_sender, "Cannot be approver")
            col2.metric("Identified Requester", requester)
            col3.metric("Identified Approver", approver)
            
            # Email details tabs
            tab1, tab2, tab3 = st.tabs(["Email Thread", "Role Scores", "Participants"])
            
            with tab1:
                st.subheader("Email Thread Analysis")
                df_emails = pd.DataFrame(parsed_emails)
                st.dataframe(df_emails[["Email Sequence", "Sender", "Receiver", "subject", "date"]])
                
                # Show email details in expanders
                for email in parsed_emails:
                    with st.expander(f"Email #{email['Email Sequence']}: {email['subject']}"):
                        cols = st.columns(2)
                        cols[0].write(f"**From:** {email['Sender']}")
                        cols[1].write(f"**To:** {email['Receiver']}")
                        cols[0].write(f"**Date:** {email['date']} {email['time']}")
                        cols[1].write(f"**CC:** {email['cc'] if email['cc'] else 'None'}")
                        
                        st.write("**Body:**")
                        st.text(email['email body'][:500] + ("..." if len(email['email body']) > 500 else ""))
                        
                        if email['approval statement']:
                            st.success(f"Approval statement: {email['approval statement']}")
                        if email['request statement']:
                            st.info(f"Request statement: {email['request statement']}")
            
            with tab2:
                st.subheader("Detailed Role Scores")
                st.write("""
                Scores are calculated based on:
                - Keyword matching
                - Temporal positioning in thread
                - Pronoun patterns
                - First sender status
                """)
                
                for sender, score_data in scores.items():
                    with st.expander(f"{sender} (Approver: {score_data['approver']:.1f}, Requester: {score_data['requester']:.1f})"):
                        st.write(f"**Approver Score Breakdown:**")
                        for detail in [d for d in score_data['details'] if "approver" in d.lower() or "temporal" in d.lower()]:
                            st.write(f"- {detail}")
                        
                        st.write(f"\n**Requester Score Breakdown:**")
                        for detail in [d for d in score_data['details'] if "requester" in d.lower() or "temporal" in d.lower()]:
                            st.write(f"- {detail}")
            
            with tab3:
                st.subheader("Participant Roles")
                df_roles = pd.DataFrame(role_mapping)
                st.dataframe(df_roles)
                
                # Download buttons
                st.download_button(
                    label="Download Participant Roles (CSV)",
                    data=df_roles.to_csv(index=False).encode('utf-8'),
                    file_name="Email_Users.csv",
                    mime="text/csv"
                )
                
                st.download_button(
                    label="Download Full Email Analysis (CSV)",
                    data=pd.DataFrame(parsed_emails).to_csv(index=False).encode('utf-8'),
                    file_name="parsed_emails.csv",
                    mime="text/csv"
                )
            
        except Exception as e:
            st.error(f"An error occurred: {str(e)}")
        finally:
            # Clean up temporary file
            if os.path.exists(tmp_path):
                os.unlink(tmp_path)

if __name__ == "__main__":
    main()
