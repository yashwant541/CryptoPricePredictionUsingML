import dataiku
import pandas as pd
import zipfile
from io import BytesIO
import tempfile
import os
import sys

# Fixed folder handles
input_folder = dataiku.Folder("your_input_folder_id")
output_folder = dataiku.Folder("your_output_folder_id")

def log(message):
    print(f"[LOG] {message}", file=sys.stderr, flush=True)

def process_excel_files_with_specific_tab(tab_name="Sheet1"):
    """
    Process all Excel files from ZIP, extract specific tab, and save as CSV
    """
    try:
        log("üîç Searching for ZIP files...")
        zip_files = input_folder.list_paths_in_partition()
        zip_files = [f for f in zip_files if f.lower().endswith(".zip")]
        
        if not zip_files:
            raise Exception("‚ùå No ZIP files found.")
        
        zip_path = zip_files[0]
        zip_name = os.path.basename(zip_path)
        log(f"üì¶ Processing ZIP: {zip_name}")
        log(f"üìë Extracting tab: '{tab_name}'")
        
        # Download ZIP to temp file
        with tempfile.NamedTemporaryFile(suffix=".zip", delete=False) as tmp_zip:
            tmp_zip_path = tmp_zip.name
            with input_folder.get_download_stream(zip_path) as stream:
                chunk_size = 8192
                while True:
                    chunk = stream.read(chunk_size)
                    if not chunk:
                        break
                    tmp_zip.write(chunk)
        
        processed_files = []
        
        with zipfile.ZipFile(tmp_zip_path, 'r') as zf:
            excel_files = [f for f in zf.namelist() if f.lower().endswith(('.xlsx', '.xls'))]
            
            if not excel_files:
                raise Exception("‚ùå No Excel files found in ZIP.")
            
            log(f"üìä Found {len(excel_files)} Excel file(s)")
            
            for excel_file in excel_files:
                try:
                    csv_filename = convert_excel_tab_to_csv(zf, excel_file, tab_name)
                    processed_files.append(csv_filename)
                    log(f"‚úÖ Processed: {excel_file} ‚Üí {csv_filename}")
                    
                except Exception as e:
                    log(f"‚ö†Ô∏è Failed {excel_file}: {str(e)}")
                    continue
        
        os.remove(tmp_zip_path)
        log(f"üéâ Successfully converted {len(processed_files)} file(s)")
        return processed_files
        
    except Exception as e:
        if 'tmp_zip_path' in locals() and os.path.exists(tmp_zip_path):
            os.remove(tmp_zip_path)
        log(f"üî• ERROR: {str(e)}")
        raise

def convert_excel_tab_to_csv(zf, excel_file_path, tab_name):
    """
    Convert specific tab from Excel file to CSV
    """
    with zf.open(excel_file_path) as excel_file:
        try:
            # Try to read specific tab
            df = pd.read_excel(excel_file, sheet_name=tab_name)
        except ValueError:
            # If specific tab not found, use first tab
            log(f"üìù Tab '{tab_name}' not found in {excel_file_path}, using first tab")
            excel_file.seek(0)
            df = pd.read_excel(excel_file, sheet_name=0)
            tab_name = "first_tab"
    
    # Generate filename with tab info
    csv_filename = generate_csv_filename_with_tab(excel_file_path, tab_name)
    
    # Create and upload CSV
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8') as tmp_csv:
        tmp_csv_path = tmp_csv.name
        df.to_csv(tmp_csv, index=False)
    
    with open(tmp_csv_path, 'rb') as csv_file:
        output_folder.upload_stream(csv_filename, csv_file)
    
    os.remove(tmp_csv_path)
    return csv_filename

def generate_csv_filename_with_tab(excel_file_path, tab_name):
    """
    Generate CSV filename including tab name
    """
    base_name = os.path.splitext(os.path.basename(excel_file_path))[0]
    clean_base = "".join(c for c in base_name if c.isalnum() or c in ('-', '_', ' '))
    clean_base = clean_base.replace(' ', '_')
    
    clean_tab = "".join(c for c in tab_name if c.isalnum() or c in ('-', '_', ' '))
    clean_tab = clean_tab.replace(' ', '_')
    
    csv_filename = f"{clean_base}_{clean_tab}.csv"
    return csv_filename

def main():
    log("üöÄ Starting Excel to CSV conversion...")
    
    # Choose your processing method:
    
    # Method 1: Process all Excel files (first tab only)
    # processed_files = process_excel_files_from_zip()
    
    # Method 2: Process specific tab
    processed_files = process_excel_files_with_specific_tab(tab_name="Sheet1")  # Replace with your tab name
    
    log("‚úÖ Conversion completed successfully!")

if __name__ == "__main__":
    main()
