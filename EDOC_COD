import dataiku
import zipfile
import tempfile
import shutil
import os
import pandas as pd
import io
import sys

# -------------------------
# Folder setup
# -------------------------
input_folder = dataiku.Folder("Tw4EvbUb")    # üîπ Replace with your ZIP input folder ID
output_folder = dataiku.Folder("pwBGEpop")   # üîπ Replace with your output folder ID

def log(msg):
    print(f"[LOG] {msg}", file=sys.stderr, flush=True)

def extract_table(df):
    """
    Automatically detect and extract table until blank or non-tabular section.
    - Detects header row
    - Stops when consecutive empty rows found
    """
    # Drop completely empty rows first
    df_clean = df.dropna(how='all')
    if df_clean.empty:
        return pd.DataFrame()

    # Find the first row that looks like header (mostly strings)
    header_idx = None
    for i, row in df_clean.iterrows():
        non_nulls = row.notna().sum()
        if non_nulls > len(row) / 2:
            header_idx = i
            break

    if header_idx is None:
        return pd.DataFrame()

    # Use header row as column names
    df_clean.columns = df_clean.iloc[header_idx]
    df_clean = df_clean.iloc[header_idx + 1:].reset_index(drop=True)

    # Stop at first long gap of empty rows
    non_empty = df_clean[df_clean.notna().any(axis=1)]
    if non_empty.empty:
        return df_clean

    first_empty_after_table = non_empty.index[-1]
    df_table = df_clean.loc[:first_empty_after_table]
    return df_table

def main():
    log("üöÄ Starting ZIP to Excel extraction...")

    # List ZIP files in folder
    zip_files = [f for f in input_folder.list_paths_in_partition() if f.lower().endswith(".zip")]
    if not zip_files:
        raise Exception("‚ùå No ZIP files found in the input folder.")

    log(f"üì¶ Found {len(zip_files)} ZIP file(s).")

    for zip_path in zip_files:
        file_name = os.path.basename(zip_path)
        log(f"üß© Processing ZIP: {file_name}")

        # Download ZIP to temp
        with tempfile.NamedTemporaryFile(suffix=".zip", delete=False) as tmp_zip:
            with input_folder.get_download_stream(zip_path) as stream:
                shutil.copyfileobj(stream, tmp_zip)
            tmp_zip_path = tmp_zip.name

        # Verify it's a valid ZIP
        try:
            with zipfile.ZipFile(tmp_zip_path, 'r') as zf:
                excel_files = [f for f in zf.namelist() if f.endswith('.xlsx')]
                if not excel_files:
                    log(f"‚ö†Ô∏è No Excel files found in {file_name}. Skipping.")
                    continue

                for excel_file_name in excel_files:
                    log(f"üìä Reading Excel: {excel_file_name}")

                    with zf.open(excel_file_name) as excel_stream:
                        xls = pd.ExcelFile(excel_stream)

                        for sheet_name in xls.sheet_names:
                            log(f"üóÇÔ∏è Reading sheet: {sheet_name}")
                            df = pd.read_excel(xls, sheet_name=sheet_name, header=None)
                            df_table = extract_table(df)

                            if df_table.empty:
                                log(f"‚ö†Ô∏è No valid table detected in sheet: {sheet_name}")
                                continue

                            # Save table to output folder
                            output_filename = f"{os.path.splitext(file_name)[0]}_{sheet_name}_table.csv"
                            with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8', newline='') as tmp_csv:
                                df_table.to_csv(tmp_csv.name, index=False)
                                output_csv_path = tmp_csv.name

                            with open(output_csv_path, 'rb') as f:
                                output_folder.upload_stream(output_filename, f)
                            os.remove(output_csv_path)

                            log(f"‚úÖ Saved extracted table to: {output_filename}")

        except zipfile.BadZipFile:
            log(f"‚ùå ERROR: {file_name} is not a valid ZIP file.")
        finally:
            os.remove(tmp_zip_path)

    log("üéâ All ZIPs processed successfully.")

if __name__ == "__main__":
    main()
