import dataiku
import pandas as pd
import zipfile
from io import BytesIO
import os

# ------------------------------------------------------------
# Helper: detect start and end of the actual table
# ------------------------------------------------------------
def extract_table(df):
    """
    Automatically detect table start and end based on blank rows.
    Keeps only the contiguous block of data (non-empty rows).
    """
    non_empty_rows = df.dropna(how='all')
    if non_empty_rows.empty:
        return pd.DataFrame()

    start_idx = non_empty_rows.index[0]
    end_idx = non_empty_rows.index[-1]
    
    df_table = df.loc[start_idx:end_idx].copy()

    # Use first row as header if it looks like one
    header_row = df_table.iloc[0]
    if header_row.notna().sum() >= 2:
        df_table.columns = header_row
        df_table = df_table[1:].reset_index(drop=True)

    return df_table


# ------------------------------------------------------------
# Helper: read one ZIP and extract Excel table
# ------------------------------------------------------------
def read_excel_from_zip_bytes(zip_bytes, excel_tab_name):
    with zipfile.ZipFile(BytesIO(zip_bytes)) as zf:
        excel_files = [f for f in zf.namelist() if f.endswith('.xlsx')]
        if not excel_files:
            raise ValueError("No Excel (.xlsx) file found in ZIP archive.")
        
        excel_filename = excel_files[0]
        with zf.open(excel_filename) as excel_file:
            df_full = pd.read_excel(excel_file, sheet_name=excel_tab_name, header=None)
    
    df_table = extract_table(df_full)
    return df_table


# ------------------------------------------------------------
# MAIN EXECUTION
# ------------------------------------------------------------
def main():
    INPUT_FOLDER = dataiku.Folder("your_input_folder_id")   # üëà Folder containing ZIPs
    OUTPUT_FOLDER = dataiku.Folder("your_output_folder_id") # üëà Folder to write CSV/XLSX
    TAB_NAME = "Sheet1"                                     # üëà Excel tab name to extract

    zip_files = [f for f in INPUT_FOLDER.list_paths_in_partition() if f.endswith('.zip')]
    print(f"Found {len(zip_files)} ZIP files to process.")

    for zip_path in zip_files:
        with INPUT_FOLDER.get_download_stream(zip_path) as stream:
            zip_bytes = stream.read()

        try:
            df_table = read_excel_from_zip_bytes(zip_bytes, TAB_NAME)
            
            # Build output file name (CSV format)
            zip_name = os.path.basename(zip_path).replace('.zip', '_table.csv')
            output_path = os.path.join(OUTPUT_FOLDER.get_path(), zip_name)
            
            # Save extracted table to output folder
            df_table.to_csv(output_path, index=False, encoding='utf-8-sig')

            print(f"‚úÖ Extracted and saved table from {zip_name}")
        except Exception as e:
            print(f"‚ö†Ô∏è Skipped {zip_path}: {e}")

    print("üéØ All ZIPs processed successfully.")


if __name__ == "__main__":
    main()
