import dataiku
import tempfile
import os
import logging
from dataiku import pandasutils as pdu

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

def extract_zip_with_py7zr():
    try:
        import py7zr
    except ImportError:
        logger.error("py7zr not installed. Please install it in your Dataiku code environment.")
        logger.info("To install: Go to Administration > Settings > Code Envs > Your Environment > Packages > Add 'py7zr'")
        return
    
    # Configure your folders - UPDATE THESE NAMES
    input_folder = dataiku.Folder("YOUR_INPUT_FOLDER_NAME")  # Change this
    output_folder = dataiku.Folder("YOUR_OUTPUT_FOLDER_NAME")  # Change this
    
    logger.info("Starting py7zr extraction process...")
    
    # Get all zip files from input folder
    all_files = input_folder.list_paths_in_partition()
    zip_files = [f for f in all_files if f.lower().endswith('.zip')]
    
    logger.info(f"Found {len(zip_files)} zip files: {zip_files}")
    
    if not zip_files:
        logger.warning("No zip files found in input folder!")
        return
    
    processed_files = []
    error_files = []
    
    for zip_path in zip_files:
        try:
            logger.info(f"Processing: {zip_path}")
            
            # Download zip file content
            with input_folder.get_download_stream(zip_path) as stream:
                zip_content = stream.read()
            
            # Create temporary directory for extraction
            with tempfile.TemporaryDirectory() as temp_dir:
                # Save zip to temporary file
                temp_zip_path = os.path.join(temp_dir, "temp_archive.zip")
                with open(temp_zip_path, 'wb') as f:
                    f.write(zip_content)
                
                # Extract using py7zr
                with py7zr.SevenZipFile(temp_zip_path, mode='r') as archive:
                    # Get list of files in archive
                    file_list = archive.getnames()
                    logger.info(f"Files in archive: {file_list}")
                    
                    # Extract all files to temp directory
                    archive.extractall(temp_dir)
                    
                    # Find and process Excel files
                    excel_files = [f for f in file_list if f.lower().endswith(('.xlsx', '.xls', '.xlsm'))]
                    logger.info(f"Excel files found: {excel_files}")
                    
                    for excel_file in excel_files:
                        try:
                            # Construct full path to extracted file
                            extracted_path = os.path.join(temp_dir, excel_file)
                            
                            # Read the extracted Excel file
                            with open(extracted_path, 'rb') as f:
                                excel_content = f.read()
                            
                            # Get just the filename
                            filename = os.path.basename(excel_file)
                            
                            # Handle duplicate filenames
                            final_filename = filename
                            counter = 1
                            while final_filename in processed_files:
                                name, ext = os.path.splitext(filename)
                                final_filename = f"{name}_{counter}{ext}"
                                counter += 1
                            
                            # Save to output folder
                            with output_folder.get_writer(final_filename) as output_writer:
                                output_writer.write(excel_content)
                            
                            logger.info(f"✓ Extracted: {final_filename}")
                            processed_files.append(final_filename)
                            
                        except Exception as e:
                            logger.error(f"✗ Error processing {excel_file}: {str(e)}")
                            error_files.append(f"{zip_path}/{excel_file}")
            
            logger.info(f"✓ Completed: {zip_path}")
            
        except Exception as e:
            logger.error(f"✗ Error processing zip file {zip_path}: {str(e)}")
            error_files.append(zip_path)
    
    # Summary
    logger.info("\n" + "="*50)
    logger.info("EXTRACTION SUMMARY")
    logger.info("="*50)
    logger.info(f"Total zip files processed: {len(zip_files)}")
    logger.info(f"Successfully extracted Excel files: {len(processed_files)}")
    logger.info(f"Files with errors: {len(error_files)}")
    
    if processed_files:
        logger.info("\nExtracted files:")
        for file in processed_files:
            logger.info(f"  ✓ {file}")
    
    if error_files:
        logger.info("\nFiles with errors:")
        for file in error_files:
            logger.info(f"  ✗ {file}")

# Run the function
extract_zip_with_py7zr()
