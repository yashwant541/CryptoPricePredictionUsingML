import dataiku
import os
import tempfile
import shutil
import py7zr

# ---------------------------
# Configure Dataiku Folders
# ---------------------------
input_folder = dataiku.Folder("YOUR_INPUT_FOLDER_ID")   # e.g. "Tw4EvbUb"
output_folder = dataiku.Folder("YOUR_OUTPUT_FOLDER_ID") # e.g. "pwBGEpop"

# ---------------------------
# Temporary Working Directory
# ---------------------------
temp_dir = tempfile.mkdtemp()

try:
    input_files = input_folder.list_paths_in_partition()
    archive_files = [f for f in input_files if f.lower().endswith(('.zip', '.7z'))]

    if not archive_files:
        print("No ZIP or 7z files found in input folder.")
    else:
        for archive_path in archive_files:
            archive_name = os.path.basename(archive_path)
            print(f"Processing: {archive_name}")

            # Download archive locally
            local_archive_path = os.path.join(temp_dir, archive_name)
            with open(local_archive_path, 'wb') as f:
                f.write(input_folder.get_download_stream(archive_path).read())

            # Extract using py7zr (works even for .zip made by 7-Zip)
            extract_path = os.path.join(temp_dir, os.path.splitext(archive_name)[0])
            os.makedirs(extract_path, exist_ok=True)

            try:
                with py7zr.SevenZipFile(local_archive_path, mode='r') as archive:
                    archive.extractall(path=extract_path)
            except Exception as e:
                print(f"⚠️ Could not extract {archive_name}: {e}")
                continue

            # Find Excel files inside
            excel_files = []
            for root, _, files in os.walk(extract_path):
                for file in files:
                    if file.lower().endswith(('.xlsx', '.xls')):
                        excel_files.append(os.path.join(root, file))

            if not excel_files:
                print(f"No Excel file found in {archive_name}. Skipping.")
                continue

            if len(excel_files) > 1:
                print(f"Multiple Excel files found in {archive_name}. Taking the first one.")

            excel_file_path = excel_files[0]

            # Rename output to match archive name (optional but neat)
            archive_base = os.path.splitext(archive_name)[0]
            ext = os.path.splitext(excel_file_path)[1]
            out_filename = f"{archive_base}{ext}"

            # Upload to output folder
            with open(excel_file_path, 'rb') as f:
                output_folder.upload_stream(out_filename, f)

            print(f"✅ Saved: {out_filename} to output folder")

finally:
    shutil.rmtree(temp_dir, ignore_errors=True)
