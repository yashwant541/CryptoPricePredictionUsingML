import dataiku
import pandas as pd
import zipfile
import tempfile
import shutil
import os
import sys
from io import BytesIO

# ------------------------------------------------------------
# Fixed folder handles using Dataiku folder IDs
# ------------------------------------------------------------
input_folder = dataiku.Folder("your_input_folder_id")     # üëà Replace with your input folder ID
output_folder = dataiku.Folder("your_output_folder_id")   # üëà Replace with your output folder ID

# ------------------------------------------------------------
# Logging helper
# ------------------------------------------------------------
def log(message):
    print(f"[LOG] {message}", file=sys.stderr, flush=True)

# ------------------------------------------------------------
# Detect start and end of the main data table
# ------------------------------------------------------------
def extract_table(df):
    non_empty_rows = df.dropna(how='all')
    if non_empty_rows.empty:
        return pd.DataFrame()
    
    start_idx = non_empty_rows.index[0]
    end_idx = non_empty_rows.index[-1]
    df_table = df.loc[start_idx:end_idx].copy()

    header_row = df_table.iloc[0]
    if header_row.notna().sum() >= 2:
        df_table.columns = header_row
        df_table = df_table[1:].reset_index(drop=True)
    
    return df_table

# ------------------------------------------------------------
# Extract Excel sheet from ZIP
# ------------------------------------------------------------
def process_zip(zip_path, sheet_name):
    file_name = os.path.basename(zip_path)
    log(f"üì¶ Processing ZIP: {file_name}")

    # Download ZIP into temp file
    with tempfile.NamedTemporaryFile(suffix=".zip", delete=False) as tmp_zip:
        tmp_zip_path = tmp_zip.name
        with input_folder.get_download_stream(zip_path) as stream:
            shutil.copyfileobj(stream, tmp_zip)

    # Extract Excel and read table
    try:
        with zipfile.ZipFile(tmp_zip_path, "r") as zf:
            excel_files = [f for f in zf.namelist() if f.endswith(".xlsx")]
            if not excel_files:
                raise Exception("No Excel file found inside ZIP.")
            
            excel_name = excel_files[0]
            log(f"üìä Found Excel: {excel_name}")

            with zf.open(excel_name) as excel_file:
                df_full = pd.read_excel(excel_file, sheet_name=sheet_name, header=None)

        df_table = extract_table(df_full)
        log(f"‚úÖ Extracted table with {len(df_table)} rows and {len(df_table.columns)} columns")

        # Write output CSV to temp, then upload
        output_filename = file_name.replace(".zip", "_table.csv")
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8', newline='') as tmp_csv:
            df_table.to_csv(tmp_csv.name, index=False, encoding='utf-8-sig')
            tmp_csv_path = tmp_csv.name

        with open(tmp_csv_path, 'rb') as f:
            output_folder.upload_stream(output_filename, f)

        log(f"üíæ Saved extracted table to {output_filename}")

        # Cleanup
        os.remove(tmp_csv_path)
        os.remove(tmp_zip_path)

    except Exception as e:
        log(f"üî• Error processing {file_name}: {str(e)}")
        os.remove(tmp_zip_path)

# ------------------------------------------------------------
# Main Function
# ------------------------------------------------------------
def main():
    try:
        SHEET_NAME = "Sheet1"  # üëà Change as needed
        log("üîç Scanning input folder for ZIP files...")
        
        zip_files = input_folder.list_paths_in_partition()
        zip_files = [f for f in zip_files if f.lower().endswith(".zip")]

        if not zip_files:
            raise Exception("‚ùå No ZIP files found in the input folder.")

        log(f"üì¶ Found {len(zip_files)} ZIP files.")
        for zip_path in zip_files:
            process_zip(zip_path, SHEET_NAME)

        log("üéØ All ZIPs processed successfully.")

    except Exception as e:
        log(f"üî• ERROR: {str(e)}")
        raise

if __name__ == "__main__":
    main()
