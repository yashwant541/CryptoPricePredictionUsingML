import dataiku
import tempfile
import os

def main():
    try:
        import py7zr
    except ImportError:
        print("ERROR: py7zr not installed. Please install it in your Dataiku environment.")
        print("To install: pip install py7zr")
        return
    
    input_folder = dataiku.Folder("YOUR_INPUT_FOLDER_NAME")
    output_folder = dataiku.Folder("YOUR_OUTPUT_FOLDER_NAME")
    
    print("Starting py7zr extraction process...")
    
    # List all 7z files (or modify for zip files)
    all_files = input_folder.list_paths_in_partition()
    archive_files = [f for f in all_files if f.lower().endswith(('.7z', '.zip'))]
    
    print(f"Found {len(archive_files)} archive files: {archive_files}")
    
    processed_count = 0
    
    for archive_path in archive_files:
        try:
            print(f"\n--- Processing: {archive_path} ---")
            
            # Download archive file
            with input_folder.get_download_stream(archive_path) as stream:
                archive_content = stream.read()
            
            # Create temporary directory
            with tempfile.TemporaryDirectory() as temp_dir:
                # Save archive to temporary file
                temp_archive_path = os.path.join(temp_dir, "temp_archive")
                with open(temp_archive_path, 'wb') as f:
                    f.write(archive_content)
                
                # Extract using py7zr
                with py7zr.SevenZipFile(temp_archive_path, mode='r') as z:
                    z.extractall(temp_dir)
                
                print("Extraction successful")
                
                # Find extracted Excel files
                for root, dirs, files in os.walk(temp_dir):
                    for file in files:
                        if file.lower().endswith(('.xlsx', '.xls', '.xlsm')):
                            file_path = os.path.join(root, file)
                            
                            # Read extracted Excel file
                            with open(file_path, 'rb') as f:
                                excel_content = f.read()
                            
                            # Save to output folder
                            with output_folder.get_writer(file) as output_writer:
                                output_writer.write(excel_content)
                            
                            print(f"✓ Extracted: {file}")
                            processed_count += 1
            
            print(f"✓ Completed: {archive_path}")
            
        except Exception as e:
            print(f"✗ Error processing {archive_path}: {str(e)}")
    
    print(f"\n=== PROCESSING COMPLETE ===")
    print(f"Successfully extracted {processed_count} Excel files")

if __name__ == "__main__":
    main()
