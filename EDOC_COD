import dataiku
import os
import tempfile
import openpyxl
import csv
import zipfile
import datetime
import py7zr
import shutil   # <--- needed for stream copy

INPUT_FOLDER_ID = "input_zip_files"
OUTPUT_FOLDER_ID = "output_reports"

def extract_with_7zip_or_zip(zip_path, extract_path):
    try:
        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(extract_path)
            print(f"✓ Extracted with zipfile: {os.path.basename(zip_path)}")
    except zipfile.BadZipFile:
        try:
            with py7zr.SevenZipFile(zip_path, mode="r") as archive:
                archive.extractall(extract_path)
                print(f"✓ Extracted with py7zr: {os.path.basename(zip_path)}")
        except Exception as e:
            print(f"✗ Extraction failed for {zip_path}: {e}")


def main():
    input_folder = dataiku.Folder(INPUT_FOLDER_ID)
    output_folder = dataiku.Folder(OUTPUT_FOLDER_ID)

    with tempfile.TemporaryDirectory() as temp_dir:
        extract_root = os.path.join(temp_dir, "extracted")
        os.makedirs(extract_root, exist_ok=True)

        print("\n--- Downloading ZIP files from Dataiku ---")
        zip_files = []
        for path in input_folder.list_paths_in_partition():
            if path.lower().endswith(".zip"):
                local_path = os.path.join(temp_dir, os.path.basename(path))
                # <-- Corrected download using stream
                with input_folder.get_download_stream(path) as in_stream, open(local_path, "wb") as out_f:
                    shutil.copyfileobj(in_stream, out_f)
                zip_files.append(local_path)
                print(f"✓ Downloaded: {os.path.basename(path)}")

        if not zip_files:
            print("No ZIP files found in input folder.")
            return

        print("\n--- Extracting ZIP files ---")
        extracted_files = []
        for zf in zip_files:
            extract_with_7zip_or_zip(zf, extract_root)
            for root, _, files in os.walk(extract_root):
                for f in files:
                    extracted_files.append(os.path.join(root, f))

        excel_files = [f for f in extracted_files if f.lower().endswith((".xlsx", ".xls", ".xlsm"))]
        print(f"\n--- Processing {len(excel_files)} Excel files ---")

        issues = []
        for excel_file in excel_files:
            validate_excel(excel_file, issues)

        # --- Save Reports locally in temp_dir ---
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        csv_path = os.path.join(temp_dir, f"error_report_{timestamp}.csv")
        xlsx_path = os.path.join(temp_dir, f"error_report_{timestamp}.xlsx")

        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Error Report"
        ws.append(["File Name", "Date", "Reason"])

        with open(csv_path, "w", newline="", encoding="utf-8") as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(["File Name", "Date", "Reason"])
            for row in issues:
                ws.append(row)
                writer.writerow(row)

        wb.save(xlsx_path)

        # <-- Corrected upload using get_writer stream
        with open(csv_path, "rb") as f_in, output_folder.get_writer(os.path.basename(csv_path)) as out_stream:
            shutil.copyfileobj(f_in, out_stream)

        with open(xlsx_path, "rb") as f_in, output_folder.get_writer(os.path.basename(xlsx_path)) as out_stream:
            shutil.copyfileobj(f_in, out_stream)

        print(f"\n✓ Uploaded reports to Dataiku folder: {OUTPUT_FOLDER_ID}")
        print(f"Total issues found: {len(issues)}")
