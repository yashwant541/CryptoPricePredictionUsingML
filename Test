def get_indentation_lengths(code):
    lines = code.split('\n')
    indentation_lengths = [len(line) - len(line.lstrip()) for line in lines]
    return indentation_lengths

def encrypt(text, shift):
    encrypted_text = ""
    for char in text:
        if char.isalpha():
            ascii_offset = ord('a') if char.islower() else ord('A')
            encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
            encrypted_text += encrypted_char
        else:
            encrypted_text += char
    return encrypted_text

def obfuscate_code(original_code, shift):
    encrypted_code = encrypt(original_code, shift)
    obfuscated_code = f"exec('{encrypted_code}'.decode('rot_13'))"
    return obfuscated_code

def sentence_from_obfuscated(obfuscated_code):
    sentence = obfuscated_code.replace('\n', ' ')
    return sentence

def code_from_sentence(sentence, indentation_lengths):
    lines = sentence.split()
    reconstructed_code = ""
    for line, indent in zip(lines, indentation_lengths):
        reconstructed_code += ' ' * indent + line + '\n'
    return reconstructed_code

# Example usage
original_code = '''
def say_hello():
    print("Hello, World!")

if True:
    print("This is True")
'''

shift_value = 3

# Obfuscate the code
obfuscated_code = obfuscate_code(original_code, shift_value)
print("Obfuscated Code:")
print(obfuscated_code)

# Get indentation lengths metadata
indentation_lengths = get_indentation_lengths(original_code)

# Convert obfuscated code to sentence
sentence = sentence_from_obfuscated(obfuscated_code)
print("\nSentence from Obfuscated Code:")
print(sentence)

# Reconstruct the original code
# reconstructed_code = code_from_sentence(sentence, indentation_lengths)
# print("\nReconstructed Code:")
# print(reconstructed_code)
