import re
import dataiku
import PyPDF2
import tempfile
import shutil
import os
import sys

# Fixed folder handles using Dataiku folder IDs
input_folder = dataiku.Folder("MPJ3zAOO")    # Replace with your input folder ID
output_folder = dataiku.Folder("MFCPQWtr")   # Replace with your output folder ID

def log(message):
    """Logging with flush"""
    print(f"[LOG] {message}", file=sys.stderr, flush=True)

def main():
    try:
        log("üîç Searching for a PDF file in the input folder...")
        pdf_files = input_folder.list_paths_in_partition()
        pdf_files = [f for f in pdf_files if f.lower().endswith(".pdf")]

        if not pdf_files:
            raise Exception("‚ùå No PDF files found in the input folder.")

        # We only process the first PDF found
        pdf_path = pdf_files[0]
        file_name = os.path.basename(pdf_path)
        log(f"üìÑ Found PDF: {file_name}")

        # Download PDF to temp file
        with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp_pdf:
            tmp_pdf_path = tmp_pdf.name
            with input_folder.get_download_stream(pdf_path) as stream:
                shutil.copyfileobj(stream, tmp_pdf)

        # Define financial ratio keywords
        KEYWORDS = [
            'Leverage ratio',
            'Common Equity Tier 1 ratio',
            'Total capital ratio',
            'Liquidity coverage ratio'
        ]

        # Extract text and match ratios
        results = []
        with open(tmp_pdf_path, "rb") as pdf_stream:
            reader = PyPDF2.PdfReader(pdf_stream)
            for page_num, page in enumerate(reader.pages, 1):
                text = page.extract_text()
                if text:
                    log(f"üìÑ Processing page {page_num}...")
                    for keyword in KEYWORDS:
                        pattern = re.escape(keyword) + r'[\s:]*([0-9.,]+ ?%?)'
                        matches = re.findall(pattern, text, re.IGNORECASE)
                        for match in matches:
                            results.append((keyword, match.strip()))
                            log(f"‚úÖ Found: {keyword} = {match.strip()}")

        os.remove(tmp_pdf_path)

        if not results:
            log("‚ö†Ô∏è No financial ratios found in the PDF.")

        # Save to output folder as CSV
        log("üíæ Writing extracted ratios to output folder...")
        output_filename = "financial_ratios_extracted.csv"
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8', newline='') as tmp_csv:
            tmp_csv.write("Financial Ratio,Value\n")
            for ratio, value in results:
                tmp_csv.write(f'"{ratio}","{value}"\n')
            output_csv_path = tmp_csv.name

        with open(output_csv_path, 'rb') as f:
            output_folder.upload_stream(output_filename, f)

        os.remove(output_csv_path)
        log(f"‚úÖ Extraction complete. {len(results)} ratio(s) written to {output_filename}")

    except Exception as e:
        log(f"üî• ERROR: {str(e)}")
        raise

if __name__ == "__main__":
    main()
