import os
import argparse
from pdf2docx import Converter
from PyPDF2 import PdfReader
import pythoncom
from docx import Document

def validate_pdf(file_path):
    """Check if the PDF file is valid and readable."""
    try:
        with open(file_path, 'rb') as f:
            reader = PdfReader(f)
            if len(reader.pages) > 0:
                return True
    except Exception as e:
        print(f"Error validating PDF: {e}")
        return False
    return False

def convert_pdf_to_docx(pdf_path, docx_path=None):
    """
    Convert a PDF file to DOCX format using pdf2docx library.
    
    Args:
        pdf_path (str): Path to the input PDF file
        docx_path (str, optional): Path to the output DOCX file. 
                                  If None, will use same name as PDF with .docx extension.
    
    Returns:
        str: Path to the generated DOCX file
    """
    if not validate_pdf(pdf_path):
        raise ValueError("Invalid or corrupted PDF file")
    
    if docx_path is None:
        docx_path = os.path.splitext(pdf_path)[0] + '.docx'
    
    # Initialize COM for potential OCR operations (though pdf2docx handles mostly text-based)
    pythoncom.CoInitialize()
    
    try:
        # Convert PDF to DOCX
        cv = Converter(pdf_path)
        cv.convert(docx_path, start=0, end=None)
        cv.close()
        
        # Verify the output
        if os.path.exists(docx_path) and os.path.getsize(docx_path) > 0:
            # Try opening the document to verify it's valid
            doc = Document(docx_path)
            if len(doc.paragraphs) > 0 or len(doc.tables) > 0:
                return docx_path
            else:
                raise ValueError("Conversion resulted in empty DOCX file")
        else:
            raise IOError("Failed to create DOCX file")
    except Exception as e:
        # Clean up potentially corrupted output file
        if os.path.exists(docx_path):
            os.remove(docx_path)
        raise RuntimeError(f"Conversion failed: {str(e)}")
    finally:
        pythoncom.CoUninitialize()
    
    return docx_path

def main():
    parser = argparse.ArgumentParser(description='Convert PDF to DOCX')
    parser.add_argument('pdf_file', help='Path to the input PDF file')
    parser.add_argument('-o', '--output', help='Path to the output DOCX file (optional)')
    args = parser.parse_args()
    
    try:
        output_path = convert_pdf_to_docx(args.pdf_file, args.output)
        print(f"Successfully converted PDF to DOCX: {output_path}")
    except Exception as e:
        print(f"Error during conversion: {e}")
        exit(1)

if __name__ == "__main__":
    main()
